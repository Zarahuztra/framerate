[
  {
    "id": "js-medium-arrays-map-001",
    "title": "Transforming Arrays with `map()`",
    "difficulty": "medium",
    "framework": "JavaScript",
    "frameworkIconText": "JS",
    "tags": ["arrays", "map", "higher-order functions", "transformation"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "The `map()` method creates a new array populated with the results of calling a provided function on every element in the calling array. It's a powerful way to transform data."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const numbers = [1, 2, 3, 4];\nconst doubledNumbers = numbers.map(function(number) {\n  return number * 2;\n});\nconsole.log(doubledNumbers); // Output: [2, 4, 6, 8]\nconsole.log(numbers);      // Output: [1, 2, 3, 4] (original is unchanged)"
      },
      {
        "type": "explanation",
        "text": "`map()` iterates over each `number` in the `numbers` array. For each `number`, the provided function `(number * 2)` is executed, and its return value becomes an element in the new `doubledNumbers` array. The original `numbers` array is not modified."
      },
      {
        "type": "tip",
        "text": "Arrow functions provide a more concise syntax for `map()`: `numbers.map(number => number * 2);`"
      }
    ],
    "quiz": {
      "snippet": "const names = [\"alice\", \"bob\", \"charlie\"];\nconst uppercaseNames = names.map(name => name.toUpperCase());\nconsole.log(uppercaseNames[1]);",
      "questionText": "What will be logged to the console?",
      "options": ["alice", "BOB", "bob", "ALICE,BOB,CHARLIE"],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `map()` method transforms each name to its uppercase version. `uppercaseNames` becomes `[\"ALICE\", \"BOB\", \"CHARLIE\"]`. Accessing index 1 gives 'BOB'."
    }
  },
  {
    "id": "js-medium-objects-access-002",
    "title": "Accessing Object Properties",
    "difficulty": "medium",
    "framework": "JavaScript",
    "frameworkIconText": "JS",
    "tags": ["objects", "properties", "dot notation", "bracket notation"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Objects store collections of key-value pairs. You can access the values (properties) of an object using dot notation or bracket notation."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const person = {\n  name: \"John Doe\",\n  age: 30,\n  \"is Student\": false\n};\n\nconsole.log(person.name);   // Output: John Doe (dot notation)\nconsole.log(person[\"age\"]); // Output: 30 (bracket notation)\nconsole.log(person[\"is Student\"]); // Output: false (bracket notation needed for keys with spaces)"
      },
      {
        "type": "explanation",
        "text": "Dot notation (`object.property`) is common for simple property names. Bracket notation (`object[\"propertyName\"]`) is more versatile; it's required if the property name has spaces, special characters, or is stored in a variable."
      }
    ],
    "quiz": {
      "snippet": "const car = { make: \"Toyota\", model: \"Camry\" };\nconst propertyName = \"make\";\nconsole.log(car[propertyName]);",
      "questionText": "What is logged to the console?",
      "options": ["make", "Toyota", "Camry", "undefined"],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Bracket notation allows you to use a variable (`propertyName`) to specify which property to access. Here, `car[propertyName]` is equivalent to `car.make`."
    }
  },
  {
    "id": "js-medium-loops-for-003",
    "title": "Iterating with `for` Loops",
    "difficulty": "medium",
    "framework": "JavaScript",
    "frameworkIconText": "JS",
    "tags": ["loops", "for loop", "iteration", "control flow"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "A `for` loop repeats a block of code a specific number of times. It consists of an initializer, a condition, and a final expression (often an incrementer)."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "let sum = 0;\nfor (let i = 1; i <= 3; i++) {\n  sum = sum + i;\n  // Iteration 1: i=1, sum=1\n  // Iteration 2: i=2, sum=3\n  // Iteration 3: i=3, sum=6\n}\nconsole.log(sum); // Output: 6"
      },
      {
        "type": "explanation",
        "text": "The loop starts with `i = 1`. It continues as long as `i <= 3`. After each iteration, `i` is incremented by 1. The `sum` variable accumulates the values of `i`."
      }
    ],
    "quiz": {
      "snippet": "let result = \"\";\nfor (let i = 0; i < 3; i++) {\n  result += \"a\";\n}\nconsole.log(result);",
      "questionText": "What is the output of this code?",
      "options": ["a", "aa", "aaa", "aaaa"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The loop runs 3 times (for i=0, i=1, i=2). In each iteration, the string 'a' is appended to `result`. So, `result` becomes 'aaa'."
    }
  },
  {
    "id": "js-medium-conditionals-if-else-004",
    "title": "Conditional Logic with `if-else`",
    "difficulty": "medium",
    "framework": "JavaScript",
    "frameworkIconText": "JS",
    "tags": ["conditionals", "if-else", "control flow", "booleans"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "`if-else` statements allow you to execute different blocks of code based on whether a condition is true or false."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "let temperature = 15;\nlet clothing = \"\";\n\nif (temperature < 10) {\n  clothing = \"Wear a heavy coat\";\n} else if (temperature < 20) {\n  clothing = \"Wear a light jacket\";\n} else {\n  clothing = \"Wear a t-shirt\";\n}\nconsole.log(clothing); // Output: Wear a light jacket"
      },
      {
        "type": "explanation",
        "text": "The code checks conditions sequentially. Since `temperature < 10` (15 < 10) is false, it checks `temperature < 20` (15 < 20), which is true. So, `clothing` is set to 'Wear a light jacket', and the `else` block is skipped."
      }
    ],
    "quiz": {
      "snippet": "let num = 7;\nlet type = \"\";\nif (num % 2 === 0) {\n  type = \"even\";\n} else {\n  type = \"odd\";\n}\nconsole.log(type);",
      "questionText": "What will be logged to the console?",
      "options": ["even", "odd", "", "Error"],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The modulo operator `%` gives the remainder of a division. `7 % 2` is 1. Since `1 === 0` is false, the `else` block is executed, setting `type` to 'odd'."
    }
  },
  {
    "id": "js-medium-arrow-functions-005",
    "title": "Introduction to Arrow Functions",
    "difficulty": "medium",
    "framework": "JavaScript",
    "frameworkIconText": "JS",
    "tags": ["functions", "arrow functions", "es6", "syntax"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Arrow functions (=>) provide a concise syntax for writing function expressions. They are especially useful for simple, one-liner functions."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Traditional function expression\nconst addOld = function(a, b) {\n  return a + b;\n};\n\n// Arrow function equivalent\nconst addNew = (a, b) => a + b;\n\n// Arrow function with multiple statements (needs curly braces and explicit return)\nconst greet = name => {\n  const greeting = \"Hello, \" + name;\n  return greeting;\n};\n\nconsole.log(addNew(5, 3)); // Output: 8\nconsole.log(greet(\"Dev\"));  // Output: Hello, Dev"
      },
      {
        "type": "explanation",
        "text": "For simple functions like `addNew`, the `return` keyword and curly braces `{}` are implicit if the function body is a single expression. For multi-line arrow functions like `greet`, curly braces and an explicit `return` are needed."
      },
      {
        "type": "important",
        "text": "Arrow functions have a different behavior regarding the `this` keyword compared to traditional functions, which is an important distinction in more advanced scenarios."
      }
    ],
    "quiz": {
      "snippet": "const multiply = (x, y) => x * y;\nlet product = multiply(4, 5);\nconsole.log(product);",
      "questionText": "What is the output of this code?",
      "options": ["multiply(4,5)", "x*y", "9", "20"],
      "correctOptionIndex": 3,
      "explanationAfterAnswer": "The arrow function `multiply` takes two arguments `x` and `y` and implicitly returns their product. `multiply(4, 5)` returns 20."
    }
  },
  {
    "id": "react-medium-useeffect-001",
    "title": "Side Effects with `useEffect` Hook",
    "difficulty": "medium",
    "framework": "React",
    "frameworkIconText": "React",
    "tags": ["hooks", "useEffect", "side effects", "lifecycle"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "The `useEffect` hook lets you perform side effects in functional components. Examples include data fetching, subscriptions, or manually changing the DOM. It runs after every render by default, but you can control when it runs using its dependency array."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    // This effect runs after every render where 'seconds' has changed\n    // or on mount if dependency array is empty.\n    const intervalId = setInterval(() => {\n      setSeconds(prevSeconds => prevSeconds + 1);\n    }, 1000);\n\n    // Cleanup function: runs when component unmounts or before effect re-runs\n    return () => clearInterval(intervalId);\n  }, []); // Empty dependency array: effect runs only once on mount, cleans up on unmount\n\n  return <p>Timer: {seconds}s</p>;\n}"
      },
      {
        "type": "explanation",
        "text": "`useEffect` with an empty dependency array (`[]`) runs the effect function once after the initial render and runs the cleanup function when the component unmounts. This is ideal for setting up timers or subscriptions."
      }
    ],
    "quiz": {
      "snippet": "useEffect(() => {\n  console.log('Component did mount or update');\n  return () => {\n    console.log('Component will unmount or before re-run');\n  };\n}, [someProp]);\n// When does the cleanup function (logging 'Component will unmount...') run?",
      "questionText": "In `useEffect`, when is the returned cleanup function executed if `[someProp]` is the dependency array?",
      "options": [
        "Only when the component unmounts",
        "Before every re-render and when the component unmounts",
        "Before the effect runs again (if `someProp` changed) AND when the component unmounts",
        "Only if `someProp` becomes null"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The cleanup function in `useEffect` runs before the effect function is executed again (if any dependencies changed) and also when the component is unmounted."
    }
  },
  {
    "id": "react-medium-conditional-rendering-002",
    "title": "Conditional Rendering",
    "difficulty": "medium",
    "framework": "React",
    "frameworkIconText": "React",
    "tags": ["conditional rendering", "jsx", "ternary operator", "&& operator"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Often you'll want to render different UI elements based on certain conditions (e.g., user login status, data availability). React allows several ways to achieve this."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "function Greeting({ isLoggedIn }) {\n  // Using if/else (not directly in JSX, but to return different JSX)\n  if (isLoggedIn) {\n    return <p>Welcome back!</p>;\n  }\n  return <p>Please sign in.</p>;\n}\n\nfunction UserStatus({ user }) {\n  // Using ternary operator\n  return <div>{user ? <p>Logged in as {user.name}</p> : <p>Guest</p>}</div>;\n}\n\nfunction AdminPanel({ isAdmin }) {\n  // Using logical && operator (renders if true, else nothing)\n  return (\n    <div>\n      <h2>Admin Area</h2>\n      {isAdmin && <button>Manage Users</button>}\n    </div>\n  );\n}"
      },
      {
        "type": "explanation",
        "text": "You can use standard JavaScript `if/else`, the ternary operator (`condition ? trueCase : falseCase`), or the logical AND (`&&`) operator for concise conditional rendering within your JSX."
      }
    ],
    "quiz": {
      "snippet": "function WarningMessage({ message }) {\n  return message ? <div className=\"warning\">{message}</div> : null;\n}\n// What does this component render if 'message' is an empty string (\"\")?",
      "questionText": "If `message` is an empty string (`\"\"`), what does `WarningMessage` render?",
      "options": [
        "An empty div",
        "null (nothing)",
        "A div with an empty string",
        "An error"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "In JavaScript, an empty string (`\"\"`) is a 'falsy' value. So, `message ? ... : null` will evaluate to `null` when `message` is empty, causing React to render nothing."
    }
  },
  {
    "id": "react-medium-props-destructuring-003",
    "title": "Props Destructuring",
    "difficulty": "medium",
    "framework": "React",
    "frameworkIconText": "React",
    "tags": ["props", "destructuring", "components", "syntax"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Destructuring props in functional components makes your code cleaner and easier to read by directly extracting the properties you need from the `props` object."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "// Without destructuring\nfunction UserInfoOld(props) {\n  return <p>{props.name} is {props.age} years old.</p>;\n}\n\n// With destructuring in the function parameters\nfunction UserInfoNew({ name, age }) {\n  return <p>{name} is {age} years old.</p>;\n}\n\n// With destructuring inside the function body\nfunction UserInfoAnother(props) {\n  const { name, age } = props;\n  return <p>{name} is {age} years old.</p>;\n}\n\n// <UserInfoNew name=\"Eve\" age={28} />"
      },
      {
        "type": "explanation",
        "text": "Instead of repeatedly writing `props.propertyName`, you can extract `name` and `age` directly. This is especially helpful when a component accepts many props."
      }
    ],
    "quiz": {
      "snippet": "function ProductDisplay({ name, price = 10.00 }) {\n  return <p>{name}: ${price.toFixed(2)}</p>;\n}\n// <ProductDisplay name=\"Apple\" />",
      "questionText": "If `ProductDisplay` is called as `<ProductDisplay name=\"Apple\" />`, what will it render?",
      "options": [
        "Apple: $undefined",
        "Apple: $10.00",
        "Error: price is missing",
        "Apple: $0.00"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The component uses props destructuring with a default value for `price`. Since `price` is not provided in the JSX call, it defaults to `10.00`."
    }
  },
  {
    "id": "react-medium-lifting-state-up-004",
    "title": "Lifting State Up",
    "difficulty": "medium",
    "framework": "React",
    "frameworkIconText": "React",
    "tags": ["state management", "component communication", "lifting state"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "When multiple components need to reflect the same changing data, it's recommended to lift the shared state up to their closest common ancestor. Then, pass the state down via props and event handlers up via callbacks."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "function TemperatureInput({ scale, temperature, onTemperatureChange }) {\n  return (\n    <fieldset>\n      <legend>Enter temperature in {scale}:</legend>\n      <input value={temperature} onChange={(e) => onTemperatureChange(e.target.value, scale)} />\n    </fieldset>\n  );\n}\n\nfunction Calculator() { // Common ancestor\n  const [temperature, setTemperature] = useState('');\n  const [scale, setScale] = useState('c');\n\n  const toCelsius = (f) => (f - 32) * 5 / 9;\n  const toFahrenheit = (c) => (c * 9 / 5) + 32;\n\n  const handleCelsiusChange = (temp) => {\n    setTemperature(temp);\n    setScale('c');\n  };\n  const handleFahrenheitChange = (temp) => {\n    setTemperature(temp);\n    setScale('f');\n  };\n\n  const celsius = scale === 'f' ? toCelsius(parseFloat(temperature)) || '' : temperature;\n  const fahrenheit = scale === 'c' ? toFahrenheit(parseFloat(temperature)) || '' : temperature;\n\n  return (\n    <div>\n      <TemperatureInput scale=\"Celsius\" temperature={celsius} onTemperatureChange={handleCelsiusChange} />\n      <TemperatureInput scale=\"Fahrenheit\" temperature={fahrenheit} onTemperatureChange={handleFahrenheitChange} />\n    </div>\n  );\n}"
      },
      {
        "type": "explanation",
        "text": "In this temperature converter, the `Calculator` component holds the `temperature` and `scale` state. It passes these down to `TemperatureInput` components and receives updates via callback props like `onTemperatureChange`."
      }
    ],
    "quiz": {
      "snippet": "function Parent() {\n  const [sharedValue, setSharedValue] = useState(\"Initial\");\n  return (\n    <>\n      <ChildA value={sharedValue} />\n      <ChildB onUpdate={(newValue) => setSharedValue(newValue)} />\n    </>\n  );\n}\n// ChildA displays 'value'. ChildB has a button that calls 'onUpdate'.",
      "questionText": "What is the primary purpose of the 'Lifting State Up' pattern?",
      "options": [
        "To make child components independent",
        "To share and synchronize state between sibling components",
        "To reduce the number of props passed",
        "To improve component rendering performance"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "'Lifting State Up' is used when several components need to reflect the same changing data. The state is moved to their closest common ancestor, and then passed down."
    }
  },
  {
    "id": "react-medium-forms-controlled-005",
    "title": "Controlled Components in Forms",
    "difficulty": "medium",
    "framework": "React",
    "frameworkIconText": "React",
    "tags": ["forms", "controlled components", "input", "state"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "In HTML, form elements like `<input>`, `<textarea>`, and `<select>` typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components and updated only with `setState()` (or its hook equivalent). A controlled component is one where React state is the 'single source of truth' for the input's value."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "function NameForm() {\n  const [name, setName] = useState('');\n\n  const handleChange = (event) => {\n    setName(event.target.value.toUpperCase()); // Example: always uppercase\n  };\n\n  const handleSubmit = (event) => {\n    alert('A name was submitted: ' + name);\n    event.preventDefault();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input type=\"text\" value={name} onChange={handleChange} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}"
      },
      {
        "type": "explanation",
        "text": "The `<input>` element's `value` is driven by the `name` state. The `onChange` handler updates the `name` state whenever the input changes. This makes the React state the single source of truth."
      }
    ],
    "quiz": {
      "snippet": "function MyInput() {\n  const [value, setValue] = useState(\"\");\n  return <input value={value} onChange={e => setValue(e.target.value)} />;\n}\n// This is an example of what?",
      "questionText": "An input field whose value is controlled by React state is known as a:",
      "options": [
        "Stateless component",
        "Uncontrolled component",
        "Controlled component",
        "Higher-order component"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "A controlled component is an input form element whose value is controlled by React state. Any changes to the input's value are handled by an event handler that updates the state."
    }
  },
  {
    "id": "nextjs-medium-getstaticprops-001",
    "title": "Data Fetching: `getStaticProps` for Static Generation",
    "difficulty": "medium",
    "framework": "Next.js",
    "frameworkIconText": "Next.js",
    "tags": [
      "data fetching",
      "getStaticProps",
      "ssg",
      "static generation",
      "build time"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "`getStaticProps` is an asynchronous function that runs at build time in Node.js (it's never run client-side). It allows you to fetch data and pass it as props to your page component. This is ideal for pages that can be pre-rendered with data that doesn't change often, like blog posts or marketing pages."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "// pages/posts/[id].js\nexport async function getStaticPaths() {\n  // Fetch a list of possible post IDs (e.g., from an API or file system)\n  // const paths = [{ params: { id: '1' } }, { params: { id: '2' } }];\n  // For this example, let's assume a small fixed set\n  const paths = [{ params: { id: 'ssg-example' } }];\n  return { paths, fallback: false }; // fallback: false means 404 for unknown paths\n}\n\nexport async function getStaticProps({ params }) {\n  // params contains the route parameters for dynamic routes (e.g., params.id)\n  // Fetch blog post data based on params.id\n  // const postData = await fetch(`https://api.example.com/posts/${params.id}`).then(res => res.json());\n  const postData = { title: 'SSG Example Post', content: `Content for post ${params.id}.` }; // Simulated data\n\n  return {\n    props: {\n      post: postData,\n    },\n    // Optional: revalidate: 10 // Enables Incremental Static Regeneration (ISR) every 10s\n  };\n}\n\nexport default function PostPage({ post }) {\n  if (!post) return <p>Loading or post not found...</p>;\n  return (\n    <div>\n      <h1>{post.title}</h1>\n      <p>{post.content}</p>\n    </div>\n  );\n}"
      },
      {
        "type": "explanation",
        "text": "For dynamic routes, `getStaticPaths` is required to tell Next.js which paths to pre-render. `getStaticProps` then fetches data for each path. The page is pre-rendered as HTML at build time with this data. Incremental Static Regeneration (ISR) can be enabled with the `revalidate` option to update static pages periodically."
      }
    ],
    "quiz": {
      "snippet": "// In a Next.js page component (e.g., pages/products.js)\nexport async function getStaticProps() {\n  // Fetch product list\n  const products = [{id:1, name:\"Book\"}];\n  return { props: { products } };\n}\n// function ProductsPage({ products }) { ... }",
      "questionText": "When does the `getStaticProps` function primarily execute?",
      "options": [
        "On every client-side request",
        "On the client-side after the page loads",
        "At build time on the server",
        "Only when a user clicks a `Link` component"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`getStaticProps` runs at build time on the server (Node.js environment) to fetch data and pre-render the page as static HTML. It can also re-run in the background if Incremental Static Regeneration (ISR) is enabled."
    }
  },
  {
    "id": "nextjs-medium-getserversideprops-002",
    "title": "Data Fetching: `getServerSideProps` for Server-Side Rendering",
    "difficulty": "medium",
    "framework": "Next.js",
    "frameworkIconText": "Next.js",
    "tags": [
      "data fetching",
      "getServerSideProps",
      "ssr",
      "server-side rendering",
      "request time"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "`getServerSideProps` is an asynchronous function that runs on the server for every request. It's suitable for pages where data changes frequently and needs to be fresh for each user, or for pages that require authentication or access to request-specific data (like cookies or query parameters)."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "// pages/profile.js\nexport async function getServerSideProps(context) {\n  // context object contains request-specific information\n  // e.g., context.req, context.res, context.params, context.query, context.preview, etc.\n  // const userId = context.req.cookies.userId; // Example: get user ID from cookie\n  // const userData = await fetch(`https://api.example.com/users/${userId}`).then(res => res.json());\n  const userData = { name: \"Jane Doe (fetched server-side)\", email: \"jane@example.com\" }; // Simulated data\n\n  if (!userData) { // Or if user is not authenticated\n    return { notFound: true }; // Or redirect: { redirect: { destination: '/login', permanent: false } }\n  }\n\n  return {\n    props: { // Will be passed to the page component as props\n      user: userData,\n    },\n  };\n}\n\nexport default function ProfilePage({ user }) {\n  return (\n    <div>\n      <h1>{user.name}'s Profile</h1>\n      <p>Email: {user.email}</p>\n    </div>\n  );\n}"
      },
      {
        "type": "explanation",
        "text": "The page is pre-rendered on each request using the data returned by `getServerSideProps`. This ensures the data is always up-to-date but can be slower than static generation because it involves server-side computation for every visit."
      }
    ],
    "quiz": {
      "snippet": "// pages/dashboard.js\nexport async function getServerSideProps(context) {\n  // Fetch data that needs to be current on every request\n  // const data = ...\n  return { props: { data } };\n}",
      "questionText": "What is a key characteristic of `getServerSideProps`?",
      "options": [
        "It runs only once at build time.",
        "It runs on the client-side after hydration.",
        "It runs on the server for every incoming request to the page.",
        "It is used for client-side data fetching within components."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`getServerSideProps` is executed on the server for every request made to the page, allowing for server-side rendering with fresh data for each user."
    }
  },
  {
    "id": "nextjs-medium-dynamic-routes-query-003",
    "title": "Dynamic Routes and Query Parameters",
    "difficulty": "medium",
    "framework": "Next.js",
    "frameworkIconText": "Next.js",
    "tags": ["routing", "dynamic routes", "query parameters", "useRouter"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Dynamic routes allow you to create pages from dynamic data (e.g., `/products/[id]`). The route parameters are available via the `useRouter` hook or in data fetching functions like `getStaticProps` and `getServerSideProps`."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "// pages/products/[productId].js\nimport { useRouter } from 'next/router';\n\nexport default function ProductPage() {\n  const router = useRouter();\n  const { productId, color } = router.query; // productId from path, color from query string\n\n  // Example URL: /products/xyz123?color=blue\n  // productId would be \"xyz123\"\n  // color would be \"blue\"\n\n  if (router.isFallback) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Product ID: {productId}</h1>\n      {color && <p>Selected Color: {color}</p>}\n    </div>\n  );\n}\n\n// For getStaticProps or getServerSideProps, 'params' and 'query' are in the context object:\n// export async function getStaticProps({ params, query }) { ... }"
      },
      {
        "type": "explanation",
        "text": "`router.query` from `useRouter` provides an object containing both dynamic route parameters (like `productId`) and query string parameters (like `color` from `?color=blue`). `router.isFallback` is useful when using `fallback: true` or `fallback: 'blocking'` in `getStaticPaths`."
      }
    ],
    "quiz": {
      "snippet": "// pages/users/[username].js\nimport { useRouter } from 'next/router';\n\nexport default function UserProfile() {\n  const router = useRouter();\n  const { username } = router.query;\n  return <h1>Profile: {username}</h1>;\n}\n// A user navigates to /users/testuser?location=US",
      "questionText": "If a user navigates to `/users/testuser?location=US`, what will be the value of `router.query.username`?",
      "options": ["testuser?location=US", "US", "testuser", "undefined"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "For dynamic routes like `[username].js`, the value from the path segment (`testuser`) becomes available as `router.query.username`. Query string parameters (`location=US`) are also part of `router.query` but under their own keys."
    }
  },
  {
    "id": "nextjs-medium-api-routes-dynamic-004",
    "title": "Dynamic API Routes",
    "difficulty": "medium",
    "framework": "Next.js",
    "frameworkIconText": "Next.js",
    "tags": ["api routes", "dynamic api", "backend", "serverless"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Similar to pages, API routes can also be dynamic. By creating a file like `pages/api/posts/[postId].js`, you can handle requests to `/api/posts/some-id`, where `some-id` becomes available in the request query."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// File: pages/api/items/[itemId].js\nexport default function itemHandler(req, res) {\n  const { itemId } = req.query; // Extract itemId from the query\n\n  if (req.method === 'GET') {\n    // Fetch item data based on itemId from a database or service\n    res.status(200).json({ id: itemId, name: `Item ${itemId}`, price: Math.random() * 100 });\n  } else if (req.method === 'PUT') {\n    // Update item data for itemId\n    res.status(200).json({ message: `Item ${itemId} updated.`, data: req.body });\n  } else {\n    res.setHeader('Allow', ['GET', 'PUT']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}"
      },
      {
        "type": "explanation",
        "text": "When a request is made to, for example, `/api/items/123`, the `itemId` constant in the handler will be `'123'`. The handler can then use this ID to perform specific actions for that item, like fetching or updating it."
      }
    ],
    "quiz": {
      "snippet": "// File: pages/api/products/[id].js\nexport default function handler(req, res) {\n  const { id, category } = req.query;\n  res.status(200).json({ productId: id, productCategory: category });\n}\n// A GET request is made to: /api/products/abc?category=electronics",
      "questionText": "For a GET request to `/api/products/abc?category=electronics`, what will `req.query.id` be?",
      "options": [
        "abc?category=electronics",
        "electronics",
        "abc",
        "undefined"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "In dynamic API routes like `[id].js`, the path segment corresponding to `[id]` (which is `abc` in this case) is available as `req.query.id`. Query string parameters like `category` are also available in `req.query`."
    }
  },
  {
    "id": "nextjs-medium-image-component-005",
    "title": "Image Optimization with `next/image`",
    "difficulty": "medium",
    "framework": "Next.js",
    "frameworkIconText": "Next.js",
    "tags": ["images", "next/image", "optimization", "performance", "CLS"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "The `next/image` component extends the HTML `<img>` element with features for automatic image optimization. This includes resizing, optimizing for different screen sizes, serving modern formats (like WebP), and preventing layout shift (CLS)."
      },
      {
        "type": "code",
        "language": "jsx",
        "code": "import Image from 'next/image';\nimport profilePic from '../public/images/profile.jpg'; // Import local image\n\nfunction MyProfile() {\n  return (\n    <div>\n      <h2>Local Image Example:</h2>\n      {/* For local images, width and height are inferred if imported */}\n      <Image \n        src={profilePic} \n        alt=\"My Profile Picture\" \n        // width and height can be omitted if src is an imported static image\n        // placeholder=\"blur\" // Optional: for blur-up effect\n      />\n\n      <h2>Remote Image Example:</h2>\n      <Image \n        src=\"https://images.unsplash.com/photo-123\" \n        alt=\"A remote image\"\n        width={500} // Required for remote images\n        height={300} // Required for remote images\n        // layout=\"responsive\" // Optional: makes image scale with parent\n      />\n    </div>\n  );\n}"
      },
      {
        "type": "explanation",
        "text": "For local images imported statically, Next.js can often infer `width` and `height`. For remote images, `width` and `height` props are required to prevent layout shift. The component handles serving optimized image versions based on the device."
      },
      {
        "type": "important",
        "text": "To use remote images, you need to configure the allowed hostnames in your `next.config.js` file in the `images.domains` or `images.remotePatterns` array."
      }
    ],
    "quiz": {
      "snippet": "import Image from 'next/image';\n// <Image src=\"https://example.com/image.png\" alt=\"Remote\" width={600} height={400} />",
      "questionText": "What is a primary benefit of using the `next/image` component over a standard `<img>` tag for remote images?",
      "options": [
        "It automatically adds a border to all images.",
        "It provides automatic image optimization (resizing, modern formats) and prevents layout shift.",
        "It bypasses the need for an `alt` attribute.",
        "It only works for images stored in the `public` folder."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `next/image` component offers several optimizations, including serving appropriately sized images, converting to modern formats like WebP, and reserving space to prevent Cumulative Layout Shift (CLS), which requires `width` and `height` for remote images."
    }
  },
  {
    "id": "ts-medium-generics-001",
    "title": "Introduction to Generics",
    "difficulty": "medium",
    "framework": "TypeScript",
    "frameworkIconText": "TS",
    "tags": ["generics", "types", "reusability", "type safety"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Generics allow you to write reusable code that can work over a variety of types rather than a single one. This is common in functions or classes that operate on collections or provide utility behaviors without being tied to specific data types."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "function identity<T>(arg: T): T {\n  return arg;\n}\n\nlet outputString = identity<string>(\"myString\"); // Type T is string\nlet outputNumber = identity<number>(100);      // Type T is number\nlet outputInferred = identity(true);          // Type T is inferred as boolean\n\nconsole.log(outputString.toUpperCase());\nconsole.log(outputNumber.toFixed(2));\nconsole.log(outputInferred ? 'Yes' : 'No');"
      },
      {
        "type": "explanation",
        "text": "The `<T>` syntax declares a type variable `T`. When `identity` is called, `T` is replaced by the actual type provided (explicitly like `<string>` or inferred by TypeScript). This ensures type safety while allowing the function to be flexible."
      }
    ],
    "quiz": {
      "snippet": "function wrapInArray<U>(value: U): U[] {\n  return [value];\n}\nlet numberArray = wrapInArray(5);\nlet stringArray = wrapInArray(\"hello\");",
      "questionText": "What is the type of `numberArray` after `let numberArray = wrapInArray(5);`?",
      "options": ["number", "any[]", "U[]", "number[]"],
      "correctOptionIndex": 3,
      "explanationAfterAnswer": "The generic function `wrapInArray<U>` takes a value of type `U` and returns an array of type `U[]`. When called with `5` (a number), `U` is inferred as `number`, so `numberArray` becomes `number[]`."
    }
  },
  {
    "id": "ts-medium-enums-002",
    "title": "Using Enums for Named Constants",
    "difficulty": "medium",
    "framework": "TypeScript",
    "frameworkIconText": "TS",
    "tags": ["enums", "constants", "named values", "readability"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Enums (enumerations) allow you to define a set of named constants. Using enums can make it easier to document intent, or create a set of distinct cases. TypeScript supports both numeric and string-based enums."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "enum Direction {\n  Up,    // 0 by default\n  Down,  // 1\n  Left,  // 2\n  Right  // 3\n}\n\nlet move: Direction = Direction.Up;\nconsole.log(move); // Output: 0\n\nenum StringResponse {\n  No = \"NO\",\n  Yes = \"YES\",\n  Maybe = \"MAYBE\"\n}\n\nlet feedback: StringResponse = StringResponse.Maybe;\nconsole.log(feedback); // Output: \"MAYBE\""
      },
      {
        "type": "explanation",
        "text": "Numeric enums start auto-incrementing from 0 by default, but you can assign specific numeric values. String enums require each member to be explicitly initialized with a string value. They offer better readability in debugging."
      }
    ],
    "quiz": {
      "snippet": "enum Color { Red = 1, Green, Blue }\nlet myColor: Color = Color.Green;",
      "questionText": "What is the numeric value of `myColor`?",
      "options": ["0", "1", "2", "Green"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "In a numeric enum, if the first member is initialized (e.g., `Red = 1`), subsequent members auto-increment from that value. So, `Green` will be 2."
    }
  },
  {
    "id": "ts-medium-type-aliases-003",
    "title": "Type Aliases for Complex Types",
    "difficulty": "medium",
    "framework": "TypeScript",
    "frameworkIconText": "TS",
    "tags": [
      "type aliases",
      "custom types",
      "unions",
      "intersections",
      "readability"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Type aliases create a new name for any type. Type aliases can be used for primitives like `string` or for more complex types such as objects, unions, or tuples. They are useful for making complex types more readable and reusable."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "type Point = {\n  x: number;\n  y: number;\n};\n\ntype ID = string | number;\n\ntype StringOrNumberArray = (string | number)[];\n\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 200 });\n\nlet userId: ID = \"abc-123\";\nuserId = 456;\n// userId = true; // Error\n\nlet mixedArray: StringOrNumberArray = [1, \"two\", 3, \"four\"];"
      },
      {
        "type": "explanation",
        "text": "`Point` is an alias for an object shape. `ID` is an alias for a union type. `StringOrNumberArray` is an alias for an array that can hold strings or numbers. This makes function signatures and variable declarations cleaner."
      }
    ],
    "quiz": {
      "snippet": "type UserID = string;\ntype AdminID = number;\ntype SystemID = UserID | AdminID;\n\nlet id1: SystemID = \"user-xyz\";\nlet id2: SystemID = 101;",
      "questionText": "Based on the type aliases, which of the following assignments would cause a TypeScript error if uncommented?",
      "options": [
        "// let id3: SystemID = \"admin-007\";",
        "// let id4: SystemID = 777;",
        "// let id5: SystemID = false;",
        "// let id6: UserID = \"guest\";"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`SystemID` is a union of `string` or `number`. Assigning a boolean (`false`) to a variable of type `SystemID` would be a type error. The other assignments are valid."
    }
  },
  {
    "id": "ts-medium-utility-types-partial-readonly-004",
    "title": "Utility Types: `Partial` and `Readonly`",
    "difficulty": "medium",
    "framework": "TypeScript",
    "frameworkIconText": "TS",
    "tags": ["utility types", "Partial", "Readonly", "type transformation"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "TypeScript provides several utility types that facilitate common type transformations. `Partial<Type>` constructs a type with all properties of `Type` set to optional. `Readonly<Type>` constructs a type with all properties of `Type` set to readonly."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "interface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\n// Partial: Allows updating a Todo with only some properties\nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>): Todo {\n  return { ...todo, ...fieldsToUpdate };\n}\nconst myTodo: Todo = { title: \"Learn TS\", description: \"Study utility types\", completed: false };\nconst updatedTodo = updateTodo(myTodo, { description: \"Practice more!\" });\nconsole.log(updatedTodo);\n\n// Readonly: Creates a type where properties cannot be reassigned\nconst completedTodo: Readonly<Todo> = {\n  title: \"Finish Chapter\",\n  description: \"Read all sections\",\n  completed: true\n};\n// completedTodo.title = \"New Title\"; // Error: Cannot assign to 'title' because it is a read-only property."
      },
      {
        "type": "explanation",
        "text": "This is a simplified explanation for Partial and Readonly utility types. Partial makes properties optional. Readonly makes properties unchangeable after creation."
      }
    ],
    "quiz": {
      "snippet": "interface Config {\n  host: string;\n  port: number;\n  debugMode: boolean;\n}\nlet currentConfig: Partial<Config> = { port: 8080 };\n// currentConfig.debugMode = true; // Is this line valid?",
      "questionText": "Given `let currentConfig: Partial<Config> = { port: 8080 };`, is the line `currentConfig.debugMode = true;` valid TypeScript?",
      "options": [
        "Yes, because `debugMode` is part of `Config`.",
        "No, because `debugMode` was not initialized.",
        "Yes, `Partial<Config>` makes all properties optional, but they can still be assigned.",
        "No, `Partial<Config>` makes properties readonly."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`Partial<Config>` makes all properties of `Config` optional. This means `currentConfig` doesn't need to have `host` or `debugMode` at initialization, but you can still assign values to them later as long as the types match. `debugMode` is a boolean, so `true` is a valid assignment."
    }
  },
  {
    "id": "ts-medium-type-narrowing-guards-005",
    "title": "Type Narrowing with Type Guards",
    "difficulty": "medium",
    "framework": "TypeScript",
    "frameworkIconText": "TS",
    "tags": [
      "type narrowing",
      "type guards",
      "typeof",
      "instanceof",
      "in operator"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "When working with union types or `any`, TypeScript often needs help to understand the specific type of a variable within a certain block of code. This process is called type narrowing, and it can be achieved using type guards like `typeof`, `instanceof`, the `in` operator, or user-defined type predicates."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "function processValue(value: string | number | string[]) {\n  // typeof type guard\n  if (typeof value === 'string') {\n    console.log(value.toUpperCase());\n  } \n  // Array.isArray type guard (more reliable than typeof for arrays)\n  else if (Array.isArray(value)) {\n    console.log(\"Array items:\", value.join(', '));\n  }\n  // instanceof type guard (for classes)\n  // else if (value instanceof Date) { console.log(value.getFullYear()); }\n  else {\n    // Here, TypeScript knows 'value' must be a number\n    console.log(value.toFixed(2));\n  }\n}\n\nprocessValue(\"typescript\");\nprocessValue(123.456);\nprocessValue([\"a\", \"b\", \"c\"]);"
      },
      {
        "type": "explanation",
        "text": "Inside the `if` blocks, TypeScript narrows down the type of `value`. For example, after `typeof value === 'string'`, TypeScript knows `value` is a string, so string methods like `toUpperCase()` can be safely called."
      }
    ],
    "quiz": {
      "snippet": "function logLength(param: string | any[]) {\n  // What type guard should be used here to safely access .length?\n  if (/* ??? */) {\n    console.log(param.length);\n  } else {\n    console.log(\"Not a string or array\");\n  }\n}",
      "questionText": "To safely access the `.length` property on `param` (which is `string | any[]`), which type guard is most appropriate to check if `param` is a string OR an array?",
      "options": [
        "`typeof param === 'object'` (for array) OR `typeof param === 'string'`",
        "`param instanceof String || param instanceof Array`",
        "`typeof param === 'string' || Array.isArray(param)`",
        "`'length' in param`"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`typeof param === 'string'` correctly identifies strings. `Array.isArray(param)` is the standard and most reliable way to check if something is an array. `typeof array` actually returns 'object'."
    }
  },
  {
    "id": "vue-medium-components-props-events-001",
    "title": "Component Communication: Props & Custom Events",
    "difficulty": "medium",
    "framework": "Vue.js",
    "frameworkIconText": "Vue",
    "tags": ["components", "props", "custom events", "$emit", "parent-child"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Components communicate in a parent-child relationship. Parents pass data down to children via props. Children can communicate up to parents by emitting custom events using `this.$emit('eventName', eventPayload)`."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div id=\"app\">\n  <p>Total Clicks: {{ totalClicks }}</p>\n  <child-button @increment-total=\"handleIncrement\"></child-button>\n  <child-button @increment-total=\"handleIncrement\"></child-button>\n</div>\n\n<script src=\"https://unpkg.com/vue@next\"></script>\n<script>\n  const app = Vue.createApp({\n    data() {\n      return { totalClicks: 0 };\n    },\n    methods: {\n      handleIncrement(amount) {\n        this.totalClicks += amount;\n      }\n    }\n  });\n\n  app.component('child-button', {\n    // props: ['label'], // Could also pass a label prop\n    data() {\n      return { clicksInChild: 0 };\n    },\n    methods: {\n      emitIncrement() {\n        this.clicksInChild++;\n        this.$emit('increment-total', 1); // Emit custom event with payload\n      }\n    },\n    template: `<button @click=\"emitIncrement\">Clicked in child: {{ clicksInChild }} times</button>`\n  });\n\n  app.mount('#app');\n</script>"
      },
      {
        "type": "explanation",
        "text": "The parent `app` listens for the `increment-total` event from `child-button` using `@increment-total`. When `child-button` emits this event (via `this.$emit`), the parent's `handleIncrement` method is called with the payload (1 in this case)."
      }
    ],
    "quiz": {
      "snippet": "// ChildComponent.js\n// template: `<button @click=\"$emit('updateMessage', 'Hello from Child')\">Send</button>`\n\n// ParentComponent.js\n// template: `<ChildComponent @update-message=\"parentHandler\" />`\n// methods: { parentHandler(msg) { this.message = msg; } }",
      "questionText": "How does a child component typically send data up to its parent component in Vue?",
      "options": [
        "By directly modifying parent's data",
        "Using props",
        "By emitting a custom event using `this.$emit()`",
        "Using a global event bus only"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Child components use `this.$emit('customEventName', payload)` to send data or signals to parent components, which listen for these custom events using `v-on` (or `@`)."
    }
  },
  {
    "id": "vue-medium-slots-002",
    "title": "Content Distribution with Slots",
    "difficulty": "medium",
    "framework": "Vue.js",
    "frameworkIconText": "Vue",
    "tags": ["components", "slots", "content distribution", "reusability"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Slots are a content distribution mechanism in Vue components. They allow you to pass template fragments from a parent component into designated areas within a child component's template. This makes components more flexible and reusable."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div id=\"app\">\n  <modal-dialog>\n    <template v-slot:header>\n      <h3>My Custom Header</h3>\n    </template>\n    \n    <p>This is the main content for the modal.</p> \n    \n    <template v-slot:footer>\n      <button>Close</button>\n    </template>\n  </modal-dialog>\n</div>\n\n<script>\n  const app = Vue.createApp({});\n\n  app.component('modal-dialog', {\n    template: `\n      <div class=\"modal\">\n        <header class=\"modal-header\">\n          <slot name=\"header\">Default Header</slot> \n        </header>\n        <main class=\"modal-body\">\n          <slot>Default main content</slot> \n        </main>\n        <footer class=\"modal-footer\">\n          <slot name=\"footer\">Default Footer</slot>\n        </footer>\n      </div>\n    `\n  });\n  app.mount('#app');\n</script>"
      },
      {
        "type": "explanation",
        "text": "The `modal-dialog` component defines named slots (`header`, `footer`) and a default slot. The parent component uses `<template v-slot:header>` to provide content for the 'header' slot. Content not wrapped in a `template` with `v-slot` goes into the default slot."
      }
    ],
    "quiz": {
      "snippet": "// ChildComponent.vue\n// <template><div><slot></slot></div></template>\n\n// ParentComponent.vue\n// <template><ChildComponent><em>Hello Slot!</em></ChildComponent></template>",
      "questionText": "In the parent component, where will the `<em>Hello Slot!</em>` content be rendered?",
      "options": [
        "It will replace the entire ChildComponent",
        "It will be ignored",
        "Inside the `<div>` where the `<slot></slot>` (default slot) is located in ChildComponent",
        "As a sibling to ChildComponent"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Content passed between the opening and closing tags of a component (that isn't part of a named slot) is inserted into the child component's default `<slot></slot>`."
    }
  },
  {
    "id": "vue-medium-watchers-003",
    "title": "Watching Data Changes with `watch`",
    "difficulty": "medium",
    "framework": "Vue.js",
    "frameworkIconText": "Vue",
    "tags": ["watchers", "reactivity", "side effects", "data observation"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "While computed properties are suitable for synchronous data transformations, `watch` allows you to perform asynchronous operations or more complex logic in response to changes in a specific data property."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div id=\"app\">\n  <input v-model=\"question\" placeholder=\"Ask a yes/no question\" />\n  <p>{{ answer }}</p>\n</div>\n\n<script>\n  Vue.createApp({\n    data() {\n      return {\n        question: '',\n        answer: 'Questions usually contain a question mark. ;-)'\n      };\n    },\n    watch: {\n      // whenever question changes, this function will run\n      question(newQuestion, oldQuestion) {\n        if (newQuestion.includes('?')) {\n          this.getAnswer();\n        }\n      }\n    },\n    methods: {\n      async getAnswer() {\n        this.answer = 'Thinking...';\n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 1000)); \n          this.answer = Math.random() > 0.5 ? 'Yes!' : 'No!';\n        } catch (error) {\n          this.answer = 'Error! Could not reach the API. ' + error;\n        }\n      }\n    }\n  }).mount('#app');\n</script>"
      },
      {
        "type": "explanation",
        "text": "The `watch` option observes the `question` data property. When `question` changes and includes a '?', the `getAnswer` method is called, which simulates an API call and updates the `answer`."
      }
    ],
    "quiz": {
      "snippet": "watch: {\n  userInput(newValue, oldValue) {\n    if (newValue.length > 10) {\n      this.feedback = 'Input is too long!';\n    } else {\n      this.feedback = '';\n    }\n  }\n}",
      "questionText": "What is a primary use case for a `watch` property in Vue compared to a computed property?",
      "options": [
        "To perform simple synchronous calculations based on other data properties.",
        "To perform asynchronous operations or complex logic in response to a specific data property changing.",
        "To define the initial state of a component.",
        "To render lists of items from an array."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Watchers are best used when you need to perform asynchronous operations (like API calls) or computationally expensive tasks in response to changing data, or when you need to observe a data property and trigger more complex logic."
    }
  },
  {
    "id": "vue-medium-lifecycle-hooks-004",
    "title": "Component Lifecycle Hooks",
    "difficulty": "medium",
    "framework": "Vue.js",
    "frameworkIconText": "Vue",
    "tags": [
      "lifecycle hooks",
      "mounted",
      "updated",
      "unmounted",
      "side effects"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Vue components go through a series of steps during their lifetime: creation, mounting to the DOM, updating, and unmounting. Lifecycle hooks are functions that allow you to run code at specific stages of this lifecycle."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div id=\"app\">\n  <p>{{ message }}</p>\n  <button @click=\"message = 'Updated message!'\">Update</button>\n</div>\n\n<script>\n  Vue.createApp({\n    data() {\n      return { message: 'Hello Vue!' };\n    },\n    beforeCreate() {\n      console.log('beforeCreate: data is not reactive yet.');\n    },\n    created() {\n      console.log('created: data is reactive, DOM not mounted. Message is: ' + this.message);\n    },\n    mounted() {\n      console.log('mounted: component is in the DOM. Element:', this.$el);\n      // Often used for data fetching or DOM manipulations\n    },\n    updated() {\n      console.log('updated: component re-rendered due to data change. New message:', this.message);\n    },\n    beforeUnmount() {\n      console.log('beforeUnmount: cleanup (e.g., timers, event listeners)');\n    }\n  }).mount('#app');\n</script>"
      },
      {
        "type": "explanation",
        "text": "Common hooks include `created` (after instance is created, data is reactive), `mounted` (after component is inserted into DOM), `updated` (after data changes cause a re-render), and `beforeUnmount` (before component is destroyed, for cleanup)."
      }
    ],
    "quiz": {
      "snippet": "// In a Vue component options\nexport default {\n  data() { return { items: [] }; },\n  // Which hook is most suitable for fetching initial data from an API?\n}",
      "questionText": "Which lifecycle hook is commonly used to fetch initial data for a component when it's added to the DOM?",
      "options": ["beforeCreate", "created", "mounted", "updated"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`mounted` is generally preferred for initial data fetching because it guarantees the component is in the DOM, which might be necessary for some operations or if you need to interact with the DOM after data is loaded. `created` can also be used if DOM access isn't required for the fetch."
    }
  },
  {
    "id": "vue-medium-dynamic-components-005",
    "title": "Dynamic Components with `<component :is=\"...\">`",
    "difficulty": "medium",
    "framework": "Vue.js",
    "frameworkIconText": "Vue",
    "tags": [
      "dynamic components",
      "component :is",
      "tabs",
      "conditional rendering"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Vue allows you to switch between components dynamically using the special `<component>` element with its `:is` attribute. This is useful for scenarios like tabbed interfaces where the content area changes based on user selection."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div id=\"app\">\n  <button @click=\"currentTab = 'TabA'\">Tab A</button>\n  <button @click=\"currentTab = 'TabB'\">Tab B</button>\n  <keep-alive>\n    <component :is=\"currentTabComponent\"></component>\n  </keep-alive>\n</div>\n\n<script>\n  const TabA = { template: '<div>Content of Tab A</div>' };\n  const TabB = { template: '<div>Content of Tab B</div>' };\n\n  Vue.createApp({\n    data() {\n      return { currentTab: 'TabA' };\n    },\n    components: { TabA, TabB },\n    computed: {\n      currentTabComponent() {\n        return this.currentTab; // Vue will look for a registered component with this name\n      }\n    }\n  }).mount('#app');\n</script>"
      },
      {
        "type": "explanation",
        "text": "The `:is` attribute on `<component>` binds to `currentTabComponent`. When `currentTab` data property changes (e.g., 'TabA' or 'TabB'), `currentTabComponent` updates, and Vue renders the corresponding registered component. `<keep-alive>` can be used to preserve the state of switched-out components."
      }
    ],
    "quiz": {
      "snippet": "<component :is=\"activeView\"></component>\n// data() { return { activeView: 'UserProfile' }; }\n// components: { UserProfile, UserSettings }",
      "questionText": "If `activeView` is 'UserProfile', which component will be rendered by `<component :is=\"activeView\"></component>`?",
      "options": [
        "A component literally named 'activeView'",
        "The component registered as 'UserProfile'",
        "No component, it will cause an error",
        "Both UserProfile and UserSettings"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `:is` attribute on the `<component>` element takes a string (or a component object). If it's a string, Vue looks for a registered component with that name. So, it will render the `UserProfile` component."
    }
  },
  {
    "id": "angular-medium-input-output-001",
    "title": "Component Interaction: `@Input()` and `@Output()`",
    "difficulty": "medium",
    "framework": "Angular",
    "frameworkIconText": "Angular",
    "tags": [
      "components",
      "@Input",
      "@Output",
      "EventEmitter",
      "parent-child communication"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Angular components often need to communicate. `@Input()` decorator allows a parent component to pass data to a child component. `@Output()` decorator, combined with `EventEmitter`, allows a child component to send data or events up to its parent."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// child.component.ts\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-child-item',\n  template: `\n    <p>Item: {{ itemName }}</p>\n    <button (click)=\"notifyParent()\">Notify Parent</button>\n  `\n})\nexport class ChildItemComponent {\n  @Input() itemName: string = ''; // Data from parent\n  @Output() itemNotification = new EventEmitter<string>(); // Event emitter to parent\n\n  notifyParent() {\n    this.itemNotification.emit(`Notification from ${this.itemName}`);\n  }\n}\n\n// parent.component.ts (template part)\n// <app-child-item \n//   [itemName]=\"'Product A'\" \n//   (itemNotification)=\"onChildNotification($event)\"\n// ></app-child-item>\n// \n// // parent.component.ts (class part)\n// onChildNotification(message: string) {\n//   console.log(message); // Logs: \"Notification from Product A\"\n// }"
      },
      {
        "type": "explanation",
        "text": "The parent passes 'Product A' to `ChildItemComponent` via the `itemName` input property. When the button in the child is clicked, it emits an `itemNotification` event with a message, which the parent listens to and handles with its `onChildNotification` method."
      }
    ],
    "quiz": {
      "snippet": "// ChildComponent.ts\n// @Input() message: string;\n// @Output() onAction = new EventEmitter<void>();\n\n// ParentComponent.html\n// <app-child [message]=\"'Hello'\" (onAction)=\"doSomething()\"></app-child>",
      "questionText": "How does a child component typically send a signal or data to its parent component in Angular?",
      "options": [
        "By directly calling a parent method using `this.parent.method()`",
        "Using an `@Input()` decorator on a parent property",
        "By emitting an event using an `@Output()` property (which is an EventEmitter)",
        "Through a global Angular service only"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Child components use an `@Output()` decorator on a property of type `EventEmitter`. They then call the `.emit()` method on this EventEmitter to send data or a signal to the parent, which listens with event binding `(eventName)=\"handlerMethod()\"`."
    }
  },
  {
    "id": "angular-medium-services-di-002",
    "title": "Services and Dependency Injection (DI)",
    "difficulty": "medium",
    "framework": "Angular",
    "frameworkIconText": "Angular",
    "tags": [
      "services",
      "dependency injection",
      "@Injectable",
      "providers",
      "shared logic"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Services in Angular are typically classes that encapsulate business logic, data retrieval, or other functionalities that can be shared across components. Dependency Injection (DI) is a design pattern Angular uses to provide components with instances of these services."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// src/app/data.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root' // Makes the service a singleton available app-wide\n})\nexport class DataService {\n  private data: string[] = ['Initial Data 1', 'Initial Data 2'];\n\n  getData(): string[] {\n    return this.data;\n  }\n  addData(item: string) {\n    this.data.push(item);\n  }\n}\n\n// src/app/my.component.ts\nimport { Component } from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'app-my-component',\n  template: `<ul><li *ngFor=\"let item of items\">{{ item }}</li></ul>`\n})\nexport class MyComponent {\n  items: string[];\n  constructor(private dataService: DataService) { // DI in constructor\n    this.items = this.dataService.getData();\n  }\n}"
      },
      {
        "type": "explanation",
        "text": "The `DataService` is marked with `@Injectable()` and `providedIn: 'root'`. `MyComponent` receives an instance of `DataService` through its constructor due to Angular's DI system. This allows `MyComponent` to use the service's methods."
      }
    ],
    "quiz": {
      "snippet": "// logger.service.ts\n// @Injectable({ providedIn: 'root' })\n// export class LoggerService { log(message: string) { console.log(message); } }\n\n// my.component.ts\n// constructor(private logger: LoggerService) {}\n// this.logger.log(\"Component initialized\");",
      "questionText": "What is the primary purpose of Dependency Injection (DI) in Angular?",
      "options": [
        "To directly manipulate the DOM",
        "To provide components with their dependencies (like services) rather than having them create or locate them",
        "To define the HTML structure of components",
        "To manage CSS styling for the application"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Dependency Injection is a design pattern where a class (like a component) receives its dependencies from an external source (the DI framework) rather than creating them itself. This promotes loose coupling and testability. Angular's DI provides instances of services to components."
    }
  },
  {
    "id": "angular-medium-template-driven-forms-003",
    "title": "Template-Driven Forms (Basic)",
    "difficulty": "medium",
    "framework": "Angular",
    "frameworkIconText": "Angular",
    "tags": ["forms", "template-driven", "ngModel", "ngForm", "validation"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Angular offers two approaches to forms: template-driven and reactive. Template-driven forms rely mostly on directives in the template. `ngModel` is used for two-way data binding, and `ngForm` directive tracks the overall form state."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- login.component.html -->\n<form #loginForm=\"ngForm\" (ngSubmit)=\"onSubmit(loginForm)\">\n  <div>\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" \n           [(ngModel)]=\"user.username\" required #nameInput=\"ngModel\">\n    <div *ngIf=\"nameInput.invalid && (nameInput.dirty || nameInput.touched)\"\n         class=\"alert alert-danger\">\n      Username is required.\n    </div>\n  </div>\n  <button type=\"submit\" [disabled]=\"!loginForm.form.valid\">Login</button>\n</form>\n\n<!-- login.component.ts -->\n<!-- \nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({...})\nexport class LoginComponent {\n  user = { username: '', password: '' };\n\n  onSubmit(form: NgForm) {\n    if (form.valid) {\n      console.log('Form Submitted!', form.value);\n    }\n  }\n}\n// Don't forget to import FormsModule in your AppModule! \n// import { FormsModule } from '@angular/forms';\n// @NgModule({ imports: [ FormsModule, ... ] })\n-->"
      },
      {
        "type": "explanation",
        "text": "`[(ngModel)]` creates two-way binding for the input field. `#loginForm=\"ngForm\"` creates a reference to the form's state. Validation (like `required`) can be added, and error messages can be shown conditionally based on input state (e.g., `nameInput.invalid`)."
      }
    ],
    "quiz": {
      "snippet": "<input type=\"email\" name=\"email\" [(ngModel)]=\"userEmail\" required>\n<!-- What does [(ngModel)] achieve? -->",
      "questionText": "In Angular template-driven forms, what is the primary function of the `[(ngModel)]` directive?",
      "options": [
        "To define the initial value of the input only",
        "To listen for form submission events only",
        "To create two-way data binding between an input element and a component property",
        "To apply CSS styling to the input element"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`[(ngModel)]` (often called 'banana in a box' syntax) is a directive for two-way data binding. It binds the value of the input to a component property and updates the property when the input changes, and vice-versa."
    }
  },
  {
    "id": "angular-medium-routing-basic-004",
    "title": "Basic Routing with `RouterModule`",
    "difficulty": "medium",
    "framework": "Angular",
    "frameworkIconText": "Angular",
    "tags": [
      "routing",
      "RouterModule",
      "RouterOutlet",
      "routerLink",
      "navigation"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Angular's `Router` enables navigation between different views (components) in your application. You define routes that map URL paths to components. `RouterModule.forRoot()` (in `AppModule`) and `RouterModule.forChild()` (in feature modules) are used to configure routes."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// app-routing.module.ts (or in AppModule)\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent }, // Default route\n  { path: 'about', component: AboutComponent },\n  { path: '**', redirectTo: '' } // Wildcard route for 404 (optional)\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n// app.component.html (main app template)\n// <nav>\n//   <a routerLink=\"/\">Home</a>\n//   <a routerLink=\"/about\">About</a>\n// </nav>\n// <router-outlet></router-outlet> <!-- Where routed components are displayed -->"
      },
      {
        "type": "explanation",
        "text": "The `routes` array defines the application's navigation paths. `routerLink` directive is used in templates for declarative navigation, and `<router-outlet>` is a placeholder that Angular fills with the component corresponding to the current route."
      }
    ],
    "quiz": {
      "snippet": "// app-routing.module.ts\n// const routes: Routes = [\n//   { path: 'dashboard', component: DashboardComponent }\n// ];\n\n// app.component.html\n// <a routerLink=\"/dashboard\">Dashboard</a>\n// <router-outlet></router-outlet>",
      "questionText": "What is the purpose of the `<router-outlet>` directive in an Angular template?",
      "options": [
        "To define a list of available navigation links",
        "To programmatically navigate to a different route",
        "It acts as a placeholder where Angular renders the component for the currently active route",
        "To configure the application's routes"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`<router-outlet>` is a directive from `@angular/router` that marks the spot in the template where the router should display the components for the currently activated route."
    }
  },
  {
    "id": "angular-medium-httpclient-005",
    "title": "Fetching Data with `HttpClient`",
    "difficulty": "medium",
    "framework": "Angular",
    "frameworkIconText": "Angular",
    "tags": [
      "httpclient",
      "http",
      "api calls",
      "observables",
      "rxjs",
      "data fetching"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Angular's `HttpClient` service provides a simplified API for HTTP functionality. It returns Observables from RxJS, which are powerful for handling asynchronous data streams."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// data.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\ninterface Post { id: number; title: string; body: string; }\n\n@Injectable({ providedIn: 'root' })\nexport class DataApiService {\n  private apiUrl = 'https://jsonplaceholder.typicode.com/posts';\n\n  constructor(private http: HttpClient) { }\n\n  getPosts(): Observable<Post[]> {\n    return this.http.get<Post[]>(this.apiUrl);\n  }\n\n  getPost(id: number): Observable<Post> {\n    return this.http.get<Post>(`${this.apiUrl}/${id}`);\n  }\n}\n\n// my.component.ts (using the service)\n// import { DataApiService } from './data-api.service';\n// posts$: Observable<Post[]>;\n// constructor(private apiService: DataApiService) {\n//   this.posts$ = this.apiService.getPosts();\n// }\n// In template: <li *ngFor=\"let post of posts$ | async\">{{ post.title }}</li>\n// Don't forget to import HttpClientModule in AppModule!"
      },
      {
        "type": "explanation",
        "text": "The `DataApiService` injects `HttpClient`. Methods like `getPosts()` use `this.http.get()` to make GET requests. The return type is an `Observable`, which components can subscribe to (often using the `async` pipe in templates) to receive data."
      }
    ],
    "quiz": {
      "snippet": "// import { HttpClient } from '@angular/common/http';\n// constructor(private http: HttpClient) {}\n// fetchData() {\n//   return this.http.get('/api/data');\n// }",
      "questionText": "What does a method like `this.http.get()` from Angular's `HttpClient` typically return?",
      "options": [
        "A Promise that resolves with the data",
        "The data directly (synchronously)",
        "An Observable that emits the data when the HTTP request completes",
        "A boolean indicating if the request was successful"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Angular's `HttpClient` methods (like `get`, `post`, etc.) return an RxJS `Observable`. You then subscribe to this Observable to receive the HTTP response data asynchronously."
    }
  },
  {
    "id": "nodejs-medium-async-await-fs-001",
    "title": "Async/Await with File System (fs/promises)",
    "difficulty": "medium",
    "framework": "Node.js",
    "frameworkIconText": "Node",
    "tags": [
      "async/await",
      "promises",
      "fs/promises",
      "file system",
      "error handling"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Modern Node.js offers a Promise-based API for the file system module (`fs/promises`). This allows you to use `async/await` syntax for cleaner asynchronous file operations, avoiding deeply nested callbacks ('callback hell')."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// main.js (run with 'node main.js')\nconst fs = require('fs/promises'); // Note: fs/promises\n\nasync function readFileContent(filePath) {\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    console.log('File Content:', data);\n    return data;\n  } catch (err) {\n    console.error('Error reading file:', err.message);\n    // throw err; // Or re-throw if you want the caller to handle it\n  }\n}\n\nasync function main() {\n  console.log('Starting file read...');\n  await readFileContent('example.txt'); // Assume example.txt exists\n  console.log('File read finished.');\n}\n\nmain();"
      },
      {
        "type": "explanation",
        "text": "`fs.readFile` from `fs/promises` returns a Promise. `await` pauses the execution of `readFileContent` until the promise resolves (file is read) or rejects (error occurs). `try...catch` is used for error handling with async/await."
      }
    ],
    "quiz": {
      "snippet": "const fs = require('fs/promises');\nasync function getStats(file) {\n  try {\n    const stats = await fs.stat(file);\n    return stats.size;\n  } catch {\n    return -1;\n  }\n}\n// What does `await fs.stat(file)` do?",
      "questionText": "What is the primary advantage of using `async/await` with the `fs/promises` module compared to the callback-based `fs` module?",
      "options": [
        "It makes file operations synchronous and blocking.",
        "It allows writing asynchronous code that looks and behaves a bit more like synchronous code, improving readability and error handling.",
        "It's significantly faster for all file operations.",
        "It automatically compresses files during read/write operations."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "`async/await` provides syntactic sugar over Promises, making asynchronous code easier to write and reason about by avoiding nested callbacks and allowing for more conventional `try...catch` error handling."
    }
  },
  {
    "id": "nodejs-medium-streams-pipe-002",
    "title": "Working with Streams: `pipe()`",
    "difficulty": "medium",
    "framework": "Node.js",
    "frameworkIconText": "Node",
    "tags": [
      "streams",
      "readable stream",
      "writable stream",
      "pipe",
      "memory efficiency"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Streams in Node.js are a powerful way to handle reading or writing data in chunks, which is very memory efficient for large files or network communication. The `pipe()` method is used to connect a Readable stream to a Writable stream, automatically managing the data flow."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const fs = require('fs');\nconst http = require('http');\n\n// Example 1: Piping a file to the HTTP response\n// const server = http.createServer((req, res) => {\n//   const readableFileStream = fs.createReadStream('large-video.mp4');\n//   readableFileStream.pipe(res); // Pipe file content directly to response\n// });\n// server.listen(3000);\n\n// Example 2: Piping from one file to another (copying a file)\nconst readable = fs.createReadStream('source.txt'); // Assume source.txt exists\nconst writable = fs.createWriteStream('destination.txt');\n\nreadable.pipe(writable);\n\nreadable.on('end', () => {\n  console.log('File successfully piped (copied).');\n});\n\nwritable.on('finish', () => {\n  console.log('Writable stream finished.');\n});\n\nreadable.on('error', (err) => console.error('Readable stream error:', err));\nwritable.on('error', (err) => console.error('Writable stream error:', err));"
      },
      {
        "type": "explanation",
        "text": "`fs.createReadStream()` creates a readable stream from a file, and `fs.createWriteStream()` creates a writable stream to a file. `readable.pipe(writable)` efficiently transfers data from `source.txt` to `destination.txt` without loading the entire file into memory."
      }
    ],
    "quiz": {
      "snippet": "const readable = fs.createReadStream('input.txt');\nconst writable = fs.createWriteStream('output.txt');\nreadable.pipe(writable);",
      "questionText": "What is the main benefit of using `stream.pipe()` for operations like copying a large file?",
      "options": [
        "It encrypts the data during transfer.",
        "It significantly reduces memory usage by processing data in chunks rather than loading the entire file into memory.",
        "It automatically compresses the data.",
        "It makes the operation synchronous."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `pipe()` method allows data to flow from a readable stream to a writable stream in manageable chunks. This is highly memory efficient, especially for large files, as it avoids loading the entire content into RAM at once."
    }
  },
  {
    "id": "nodejs-medium-express-basic-routing-003",
    "title": "Basic Web Server with Express.js: Routing",
    "difficulty": "medium",
    "framework": "Node.js",
    "frameworkIconText": "Express",
    "tags": [
      "expressjs",
      "web server",
      "routing",
      "middleware",
      "http methods"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. It simplifies creating routes to handle different HTTP requests."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// server.js (run with 'node server.js' after 'npm install express')\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// GET request to the homepage\napp.get('/', (req, res) => {\n  res.send('Hello from Express!');\n});\n\n// GET request to /about\napp.get('/about', (req, res) => {\n  res.send('This is the About page.');\n});\n\n// POST request to /submit-data\napp.post('/submit-data', (req, res) => {\n  // In a real app, you'd parse req.body here (e.g., with express.json() middleware)\n  res.send('Data submitted (simulated)!');\n});\n\napp.listen(port, () => {\n  console.log(`Express server listening at http://localhost:${port}`);\n});"
      },
      {
        "type": "explanation",
        "text": "`app.get('/', ...)` defines a handler for GET requests to the root path. `app.post('/submit-data', ...)` defines a handler for POST requests. Express provides methods for all common HTTP verbs (`app.put`, `app.delete`, etc.)."
      }
    ],
    "quiz": {
      "snippet": "const app = express();\napp.get('/users/:userId', (req, res) => {\n  const userId = req.params.userId;\n  res.send(`Profile for user ${userId}`);\n});\n// A GET request is made to /users/123",
      "questionText": "In an Express route defined as `app.get('/users/:userId', ...)`, how is the value of `userId` from the URL `/users/123` accessed in the route handler?",
      "options": [
        "req.query.userId",
        "req.body.userId",
        "req.params.userId",
        "req.headers.userId"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Route parameters defined with a colon (like `:userId`) in an Express route path are available in the `req.params` object. So, `req.params.userId` would be '123'."
    }
  },
  {
    "id": "nodejs-medium-middleware-express-004",
    "title": "Express.js Middleware",
    "difficulty": "medium",
    "framework": "Node.js",
    "frameworkIconText": "Express",
    "tags": ["expressjs", "middleware", "request lifecycle", "next()"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Middleware functions in Express are functions that have access to the request object (`req`), the response object (`res`), and the next middleware function in the application's request-response cycle (`next`). They can execute code, make changes to `req` and `res`, end the cycle, or call the next middleware."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const express = require('express');\nconst app = express();\n\n// Custom logger middleware\nconst requestLogger = (req, res, next) => {\n  console.log(`${req.method} ${req.originalUrl} - ${new Date().toISOString()}`);\n  next(); // Pass control to the next middleware/route handler\n};\n\n// Global middleware (applied to all routes)\napp.use(requestLogger);\n\n// Built-in middleware for parsing JSON request bodies\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.send('Homepage with logger and JSON parser');\n});\n\napp.post('/data', (req, res) => {\n  console.log('Parsed body:', req.body); // Thanks to express.json()\n  res.json({ received: req.body });\n});\n\napp.listen(3000);"
      },
      {
        "type": "explanation",
        "text": "`requestLogger` is a custom middleware that logs request details. `app.use(requestLogger)` applies it to all incoming requests. `express.json()` is built-in middleware that parses incoming JSON payloads and makes them available on `req.body`. Calling `next()` is crucial to pass control."
      }
    ],
    "quiz": {
      "snippet": "app.use((req, res, next) => {\n  req.customProperty = 'Hello from Middleware!';\n  next();\n});\napp.get('/', (req, res) => {\n  res.send(req.customProperty);\n});",
      "questionText": "What is the role of the `next()` function when called within an Express middleware function?",
      "options": [
        "To immediately send a response to the client.",
        "To stop the request-response cycle.",
        "To pass control to the next middleware function in the stack or to the route handler.",
        "To reload the current middleware function."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Calling `next()` in an Express middleware function passes control to the next middleware in the stack. If there are no more middleware functions, control is passed to the matched route handler. If `next()` is not called, the request will hang."
    }
  },
  {
    "id": "nodejs-medium-path-module-005",
    "title": "Path Module for Working with File Paths",
    "difficulty": "medium",
    "framework": "Node.js",
    "frameworkIconText": "Node",
    "tags": ["path module", "file paths", "cross-platform", "utilities"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "The built-in `path` module in Node.js provides utilities for working with file and directory paths in a platform-independent way. This is crucial for writing code that works correctly on Windows, macOS, and Linux."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const path = require('path');\n\nconst myFilePath = '/users/john/files/report.pdf';\n\nconsole.log('Directory Name:', path.dirname(myFilePath)); // /users/john/files\nconsole.log('Base Name (file name):', path.basename(myFilePath)); // report.pdf\nconsole.log('Extension Name:', path.extname(myFilePath)); // .pdf\n\nconst joinedPath = path.join('/users', 'jane', 'documents', 'notes.txt');\nconsole.log('Joined Path:', joinedPath); // /users/jane/documents/notes.txt (or \\users\\jane... on Windows)\n\nconst absolutePath = path.resolve('src', 'app', 'component.js');\nconsole.log('Absolute Path:', absolutePath); // e.g., C:\\project\\src\\app\\component.js"
      },
      {
        "type": "explanation",
        "text": "`path.dirname()` gets the directory portion, `path.basename()` gets the file/folder name, and `path.extname()` gets the extension. `path.join()` correctly joins path segments using the platform-specific separator. `path.resolve()` resolves a sequence of paths or path segments into an absolute path."
      }
    ],
    "quiz": {
      "snippet": "const path = require('path');\nconst fullPath = path.join('data', 'files', 'image.png');\n// What does path.join() primarily ensure?",
      "questionText": "What is a key benefit of using `path.join()` when constructing file paths in Node.js?",
      "options": [
        "It automatically creates the directories if they don't exist.",
        "It compresses the path string to save space.",
        "It ensures that the correct path separators (e.g., `/` or `\\`) are used for the current operating system, making the code cross-platform.",
        "It validates if the file at the constructed path actually exists."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`path.join()` normalizes the given path segments, using the platform-specific path separator (e.g., `/` for POSIX, `\\` for Windows), which helps in writing cross-platform compatible code."
    }
  },
  {
    "id": "svelte-medium-two-way-binding-001",
    "title": "Two-Way Data Binding with `bind:`",
    "difficulty": "medium",
    "framework": "Svelte",
    "frameworkIconText": "Svelte",
    "tags": ["two-way binding", "bind directive", "forms", "state management"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Svelte provides a concise way to achieve two-way data binding on form elements using the `bind:property` directive. This keeps a variable in your `<script>` block in sync with the value of an input field, select, textarea, etc."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- FormInput.svelte -->\n<script>\n  let name = 'Svelte';\n  let message = 'Hello there!';\n  let selectedOption = 'option2';\n  let isChecked = true;\n</script>\n\n<input type=\"text\" bind:value={name} placeholder=\"Name\" />\n<p>Hello, {name}!</p>\n\n<textarea bind:value={message} placeholder=\"Your message\"></textarea>\n<p>Message preview: {message.substring(0, 20)}...</p>\n\n<select bind:value={selectedOption}>\n  <option value=\"option1\">Option 1</option>\n  <option value=\"option2\">Option 2</option>\n</select>\n<p>Selected: {selectedOption}</p>\n\n<label>\n  <input type=\"checkbox\" bind:checked={isChecked} />\n  Is active?\n</label>\n<p>Active status: {isChecked}</p>"
      },
      {
        "type": "explanation",
        "text": "`bind:value={variable}` on an input or textarea creates a two-way binding. For checkboxes, `bind:checked={booleanVariable}` is used. For select elements, `bind:value` syncs with the selected option's value."
      }
    ],
    "quiz": {
      "snippet": "<script>\n  let feedback = '';\n</script>\n<textarea bind:value={feedback}></textarea>\n<p>You wrote: {feedback}</p>",
      "questionText": "If a user types 'Great!' into the textarea, what will be the value of the `feedback` variable?",
      "options": ["", "undefined", "Great!", "The textarea element itself"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `bind:value={feedback}` directive creates a two-way binding. When the user types into the textarea, the `feedback` variable in the script is automatically updated to match the textarea's content."
    }
  },
  {
    "id": "svelte-medium-stores-002",
    "title": "Shared State with Svelte Stores",
    "difficulty": "medium",
    "framework": "Svelte",
    "frameworkIconText": "Svelte",
    "tags": [
      "stores",
      "state management",
      "writable store",
      "readable store",
      "derived store",
      "global state"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Svelte stores are a powerful way to manage and share state across different components, even if they are not directly related in the component tree. Common store types are `writable`, `readable`, and `derived`."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// stores.js\nimport { writable, derived } from 'svelte/store';\n\nexport const count = writable(0); // Initial value is 0\n\nexport const doubled = derived(\n  count, // Depends on the 'count' store\n  $count => $count * 2\n);\n\n// ComponentA.svelte\n// <script>\n//   import { count } from './stores.js';\n//   function increment() { count.update(n => n + 1); }\n//   function reset() { count.set(0); }\n// </script>\n// <p>Count: {$count}</p> <button on:click={increment}>+</button>\n\n// ComponentB.svelte\n// <script>\n//   import { doubled } from './stores.js';\n// </script>\n// <p>Doubled Count: {$doubled}</p>"
      },
      {
        "type": "explanation",
        "text": "A `writable` store (`count`) has `set` and `update` methods to change its value. Components subscribe to stores by prefixing the store name with `$` (e.g., `$count`). This makes the component reactive to store changes. A `derived` store (`doubled`) automatically updates when its source stores change."
      }
    ],
    "quiz": {
      "snippet": "// stores.js\n// import { writable } from 'svelte/store';\n// export const username = writable('Guest');\n\n// Profile.svelte\n// <script>\n//   import { username } from './stores.js';\n// </script>\n// <p>User: {$username}</p>\n// <button on:click={() => username.set('Admin')}>Login as Admin</button>",
      "questionText": "How do Svelte components typically subscribe to and react to changes in a Svelte store (e.g., a `writable` store named `username`)?",
      "options": [
        "By calling `username.get()` in a `setInterval`",
        "By prefixing the store name with a `$` in the template or script (e.g., `$username`)",
        "By using `this.props.username`",
        "By manually adding event listeners to the store"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Svelte's auto-subscription feature for stores works by prefixing the store variable with a `$` (e.g., `$username`). This automatically subscribes the component to the store and re-renders it when the store's value changes."
    }
  },
  {
    "id": "svelte-medium-component-events-003",
    "title": "Dispatching Component Events with `createEventDispatcher`",
    "difficulty": "medium",
    "framework": "Svelte",
    "frameworkIconText": "Svelte",
    "tags": [
      "component events",
      "createEventDispatcher",
      "dispatch",
      "custom events",
      "parent-child"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "While props pass data down, components can communicate upwards to their parents by dispatching custom events. Svelte provides the `createEventDispatcher` function for this."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- ChildNotifier.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n  const dispatch = createEventDispatcher();\n\n  function notifyWithMessage() {\n    dispatch('message', { // Event name is 'message'\n      text: 'Hello from the child component!',\n      timestamp: Date.now()\n    });\n  }\n</script>\n\n<button on:click={notifyWithMessage}>Send Message to Parent</button>\n\n<!-- App.svelte (Parent) -->\n<!-- \n<script>\n  import ChildNotifier from './ChildNotifier.svelte';\n  let receivedMessage = '';\n  function handleMessage(event) {\n    // event.detail contains the payload dispatched by the child\n    receivedMessage = `${event.detail.text} (at ${new Date(event.detail.timestamp).toLocaleTimeString()})`;\n  }\n</script>\n\n<ChildNotifier on:message={handleMessage} />\n{#if receivedMessage}\n  <p>Parent received: {receivedMessage}</p>\n{/if}\n-->"
      },
      {
        "type": "explanation",
        "text": "`createEventDispatcher()` returns a `dispatch` function. Calling `dispatch('eventName', detailObject)` emits an event named `eventName` with the `detailObject` as its payload. The parent component listens for this event using `on:eventName={handlerFunction}`."
      }
    ],
    "quiz": {
      "snippet": "<!-- MyButton.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n  const dispatch = createEventDispatcher();\n</script>\n<button on:click={() => dispatch('notify', { value: 42 })}>Notify</button>\n\n<!-- Parent.svelte -->\n<!-- <MyButton on:notify={handleNotification} /> -->",
      "questionText": "If the 'Notify' button in `MyButton.svelte` is clicked, how can the parent component access the `{ value: 42 }` payload?",
      "options": [
        "It's available as `event.target.value` in the handler",
        "It's available as `event.detail` in the handler function",
        "It's automatically bound to a prop with the same name in the parent",
        "It's accessed via `this.$payload` in the parent"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "When a Svelte component dispatches an event with a payload (e.g., `dispatch('notify', { value: 42 })`), the payload object is accessible in the parent's event handler function via the `event.detail` property."
    }
  },
  {
    "id": "svelte-medium-slots-named-scoped-004",
    "title": "Advanced Slots: Named and Scoped Slots",
    "difficulty": "medium",
    "framework": "Svelte",
    "frameworkIconText": "Svelte",
    "tags": [
      "slots",
      "named slots",
      "scoped slots",
      "content distribution",
      "props from child to parent slot"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Svelte's slots allow for powerful content distribution. Named slots allow specific pieces of content to be injected into designated places. Scoped slots take this further by allowing the child component (providing the slot) to pass data back up to the parent's slot content."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- FancyList.svelte -->\n<script>\n  export let items = []; // e.g., [{id:1, name:'A'}, {id:2, name:'B'}]\n</script>\n\n<div class=\"list-container\">\n  <div class=\"list-header\">\n    <slot name=\"header\">Default List Header</slot>\n  </div>\n  <ul>\n    {#each items as item (item.id)}\n      <li>\n        <!-- Scoped slot: 'item' data is passed to the slot content -->\n        <slot itemData={item}>Fallback: {item.name}</slot>\n      </li>\n    {/each}\n  </ul>\n</div>\n\n<!-- App.svelte (Usage) -->\n<!-- \n<script>\n  import FancyList from './FancyList.svelte';\n  let myData = [{id: 1, name: 'First'}, {id: 2, name: 'Second'}];\n</script>\n\n<FancyList items={myData}>\n  <h2 slot=\"header\">My Awesome List</h2> \n  <div slot=\"default\" let:itemData> \n    <strong>{itemData.name.toUpperCase()}</strong> (ID: {itemData.id})\n  </div>\n</FancyList>\n-->"
      },
      {
        "type": "explanation",
        "text": "In `FancyList.svelte`, `<slot name=\"header\">` defines a named slot. The default slot `<slot itemData={item}>` is a scoped slot because it passes the `itemData` (which is the current `item` from the loop) to the parent. The parent uses `let:itemData` to receive this data within the slot's template."
      }
    ],
    "quiz": {
      "snippet": "<!-- Child.svelte -->\n<script>\n  let internalValue = \"Child Data\";\n</script>\n<div><slot message={internalValue}></slot></div>\n\n<!-- Parent.svelte -->\n<!-- <Child let:message>Received: {message}</Child> -->",
      "questionText": "What is the primary purpose of a scoped slot in Svelte?",
      "options": [
        "To style the content passed into the slot.",
        "To allow the child component (that defines the slot) to pass data to the slot's content provided by the parent.",
        "To conditionally render the slot content.",
        "To name different insertion points for content."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Scoped slots enable a child component to expose data to the parent component's slot content. The parent uses the `let:variableName` directive to access this data."
    }
  },
  {
    "id": "svelte-medium-lifecycle-onmount-ondestroy-005",
    "title": "Lifecycle Functions: `onMount` and `onDestroy`",
    "difficulty": "medium",
    "framework": "Svelte",
    "frameworkIconText": "Svelte",
    "tags": ["lifecycle", "onMount", "onDestroy", "side effects", "cleanup"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Svelte provides lifecycle functions that allow you to run code at specific points in a component's existence. `onMount` runs after the component is first rendered to the DOM. `onDestroy` runs just before the component is unmounted and destroyed, and is often used for cleanup."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- TimerComponent.svelte -->\n<script>\n  import { onMount, onDestroy } from 'svelte';\n\n  let seconds = 0;\n  let intervalId;\n\n  onMount(() => {\n    console.log('TimerComponent has been mounted!');\n    // This code runs after the component is in the DOM\n    intervalId = setInterval(() => {\n      seconds += 1;\n    }, 1000);\n\n    // Optional: return a cleanup function for onDestroy\n    return () => {\n      console.log('TimerComponent is being destroyed, clearing interval.');\n      clearInterval(intervalId);\n    };\n  });\n\n  // Alternatively, onDestroy can be used explicitly:\n  // onDestroy(() => {\n  //   console.log('Explicit onDestroy: clearing interval.');\n  //   clearInterval(intervalId);\n  // });\n</script>\n\n<p>Seconds elapsed: {seconds}</p>"
      },
      {
        "type": "explanation",
        "text": "`onMount` is commonly used for fetching initial data, setting up subscriptions, or direct DOM manipulations that require the element to be present. If `onMount` returns a function, that function will be called when the component is destroyed (acting like `onDestroy` for that specific `onMount`'s setup)."
      }
    ],
    "quiz": {
      "snippet": "<script>\n  import { onMount, onDestroy } from 'svelte';\n  let timer;\n  onMount(() => {\n    timer = setTimeout(() => console.log('Mounted!'), 100);\n    return () => clearTimeout(timer);\n  });\n</script>",
      "questionText": "What is the purpose of returning a function from `onMount`?",
      "options": [
        "To delay the execution of `onMount`.",
        "To provide a callback that Svelte will execute when the component is destroyed (cleanup).",
        "To pass data back to the parent component.",
        "To indicate that `onMount` completed successfully."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "If the function passed to `onMount` returns another function, Svelte will call this returned function when the component is unmounted. This is a common pattern for cleaning up resources established in `onMount`, such as timers or event listeners."
    }
  },
  {
    "id": "nuxtjs-medium-dynamic-routes-useasyncdata-001",
    "title": "Dynamic Routes with `useAsyncData`",
    "difficulty": "medium",
    "framework": "Nuxt.js",
    "frameworkIconText": "Nuxt",
    "tags": [
      "dynamic routes",
      "useAsyncData",
      "data fetching",
      "params",
      "ssr"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "For dynamic pages (e.g., `pages/products/[id].vue`), you often need to fetch data based on the route parameter. `useAsyncData` is a composable for fetching data asynchronously on the server (during SSR/SSG) or client (during navigation), ensuring data is available before the page renders."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- pages/posts/[slug].vue -->\n<template>\n  <article v-if=\"post\">\n    <h1>{{ post.title }}</h1>\n    <p>{{ post.content }}</p>\n  </article>\n  <div v-else-if=\"error\">Error loading post: {{ error.message }}</div>\n  <div v-else>Loading post...</div>\n</template>\n\n<script setup>\nconst route = useRoute();\nconst slug = route.params.slug;\n\n// useAsyncData takes a unique key and an async handler function\n// The handler should return the data or a promise that resolves to the data.\nconst { data: post, pending, error } = await useAsyncData(\n  `post-${slug}`, // Unique key, often includes dynamic parts\n  () => $fetch(`https://jsonplaceholder.typicode.com/posts?title=${slug}`) // Using Nuxt's $fetch\n          .then(posts => posts[0]) // Assuming API returns an array and we want the first match by title\n);\n\nif (error.value) {\n  // Handle error, e.g., show 404 page or redirect\n  console.error('Failed to fetch post:', error.value);\n  // Example: throw createError({ statusCode: 404, statusMessage: 'Post Not Found' });\n}\n\n// Optional: Set page title dynamically\nuseHead({\n  title: post.value ? post.value.title : 'Post'\n});\n</script>"
      },
      {
        "type": "explanation",
        "text": "`useRoute()` gives access to route parameters like `slug`. `useAsyncData` fetches data associated with this slug. `$fetch` is Nuxt's globally available utility for making HTTP requests (it's a wrapper around `ofetch`). The unique key (`post-${slug}`) helps Nuxt with caching and re-fetching. Error handling is important."
      }
    ],
    "quiz": {
      "snippet": "<script setup>\nconst route = useRoute();\nconst { data: product } = await useAsyncData(\n  `product-${route.params.id}`,\n  () => $fetch(`/api/products/${route.params.id}`)\n);\n</script>",
      "questionText": "What is a primary benefit of using `useAsyncData` in Nuxt 3 for fetching page-specific data?",
      "options": [
        "It only runs on the client-side after the page has loaded.",
        "It blocks rendering until data is fetched, ensuring data is available for SSR/SSG and client-side navigation, handling hydration correctly.",
        "It's a replacement for Vuex/Pinia for all state management.",
        "It automatically caches data in the browser's localStorage."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "`useAsyncData` is designed to fetch data before a page component is rendered, both on the server (for initial load) and on the client (for subsequent navigations). This ensures the data is present for SEO and to avoid content flashes."
    }
  },
  {
    "id": "nuxtjs-medium-server-api-routes-002",
    "title": "Creating Server API Routes (`server/api/`)",
    "difficulty": "medium",
    "framework": "Nuxt.js",
    "frameworkIconText": "Nuxt",
    "tags": [
      "api routes",
      "server directory",
      "nitro",
      "backend logic",
      "event handlers"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Nuxt 3 allows you to create server-side API endpoints within the `server/api/` directory. Each file in this directory defines an event handler that processes incoming requests and returns data. This is powered by Nitro, Nuxt's server engine."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// server/api/hello.get.js (handles GET requests to /api/hello)\nexport default defineEventHandler(async (event) => {\n  // event object contains request details (headers, query, params, body)\n  // const queryParams = getQuery(event);\n  // const body = await readBody(event); // For POST/PUT\n  return {\n    message: 'Hello from Nuxt API!',\n    timestamp: new Date().toISOString()\n  };\n});\n\n// server/api/items/[id].put.js (handles PUT to /api/items/:id)\n// export default defineEventHandler(async (event) => {\n//   const itemId = event.context.params.id;\n//   const body = await readBody(event);\n//   // ... update item in database ...\n//   return { success: true, updatedId: itemId, data: body };\n// });"
      },
      {
        "type": "explanation",
        "text": "Files are named according to the HTTP method they handle (e.g., `hello.get.js`, `user.post.ts`). `defineEventHandler` wraps your handler function. You can use utilities like `getQuery` and `readBody` to access request data. Dynamic parameters are available in `event.context.params`."
      }
    ],
    "quiz": {
      "snippet": "// server/api/greet/[name].get.ts\n// export default defineEventHandler((event) => {\n//   const name = event.context.params.name;\n//   return `Greetings, ${name}!`;\n// });\n// A GET request is made to /api/greet/Alice",
      "questionText": "If a file `server/api/products.post.ts` exists, which HTTP request will it handle?",
      "options": [
        "GET to /api/products",
        "POST to /api/products",
        "PUT to /api/products",
        "GET to /server/api/products"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Nuxt server API routes in the `server/api/` directory use file naming conventions. A file named `products.post.ts` will handle `POST` requests to the `/api/products` endpoint."
    }
  },
  {
    "id": "nuxtjs-medium-plugins-003",
    "title": "Extending Vue App with Nuxt Plugins",
    "difficulty": "medium",
    "framework": "Nuxt.js",
    "frameworkIconText": "Nuxt",
    "tags": [
      "plugins",
      "vue app instance",
      "provide",
      "client-only",
      "server-only"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Nuxt plugins are JavaScript modules that run when your Vue application is being created. They are useful for registering global components, directives, adding Vue prototype properties, or integrating third-party libraries. Plugins are placed in the `plugins/` directory."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// plugins/my-plugin.client.ts (runs only on client-side)\nexport default defineNuxtPlugin(nuxtApp => {\n  // nuxtApp is the Nuxt instance, nuxtApp.vueApp is the Vue app instance\n  console.log('My client-side plugin is running!');\n\n  // Example: Adding a global utility function available as $sayHello\n  nuxtApp.provide('sayHello', (name) => `Hello, ${name} from plugin!`);\n  \n  // Example: Using a Vue plugin\n  // import SomeVuePlugin from 'some-vue-plugin';\n  // nuxtApp.vueApp.use(SomeVuePlugin);\n});\n\n// plugins/another-plugin.server.ts (runs only on server-side)\n// export default defineNuxtPlugin(nuxtApp => { ... });\n\n// plugins/universal-plugin.ts (runs on both client and server)\n// export default defineNuxtPlugin(nuxtApp => { ... });\n\n// Usage in a component's <script setup>:\n// const { $sayHello } = useNuxtApp();\n// console.log($sayHello('Developer'));"
      },
      {
        "type": "explanation",
        "text": "Plugins are automatically registered. Naming convention (`.client.ts`, `.server.ts`, or just `.ts`) determines where they run. `defineNuxtPlugin` is the helper function. `nuxtApp.provide` makes helpers available throughout your app via `useNuxtApp()` or `this.$` (in Options API)."
      }
    ],
    "quiz": {
      "snippet": "// plugins/analytics.client.js\n// export default defineNuxtPlugin(nuxtApp => {\n//   // Initialize analytics library that only works in browser\n// });",
      "questionText": "If a Nuxt plugin file is named `my-plugin.client.ts`, when will this plugin execute?",
      "options": [
        "Only during the build process",
        "Only on the server-side during SSR",
        "Only on the client-side",
        "Both on the server and the client"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `.client.ts` (or `.client.js`) suffix in a Nuxt plugin filename indicates that the plugin should only be executed on the client-side."
    }
  },
  {
    "id": "nuxtjs-medium-state-management-pinia-concept-004",
    "title": "State Management with Pinia (Conceptual)",
    "difficulty": "medium",
    "framework": "Nuxt.js",
    "frameworkIconText": "PiniaNuxt",
    "tags": [
      "state management",
      "pinia",
      "stores",
      "actions",
      "getters",
      "ssr"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Pinia is the officially recommended state management library for Vue 3 and integrates seamlessly with Nuxt 3. It offers a simple API for defining stores with reactive state, getters (computed state), and actions (methods to modify state). Pinia stores are SSR-friendly."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// stores/counter.ts (Pinia store definition)\nimport { defineStore } from 'pinia';\n\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({\n    count: 0,\n    name: 'My Counter'\n  }),\n  getters: {\n    doubleCount: (state) => state.count * 2,\n    nameWithCount: (state) => `${state.name}: ${state.count}`\n  },\n  actions: {\n    increment(amount = 1) {\n      this.count += amount;\n    },\n    decrement() {\n      if (this.count > 0) this.count--;\n    }\n  }\n});\n\n// Usage in a component's <script setup>:\n// import { useCounterStore } from '~/stores/counter';\n// const counterStore = useCounterStore();\n// Access state: counterStore.count\n// Access getter: counterStore.doubleCount\n// Call action: counterStore.increment();"
      },
      {
        "type": "explanation",
        "text": "A Pinia store is defined with `defineStore`. `state` is a function returning the initial state. `getters` are like computed properties for the store. `actions` are methods that can modify the state (they can be asynchronous). Stores are typically placed in a `stores/` directory."
      }
    ],
    "quiz": {
      "snippet": "// import { defineStore } from 'pinia';\n// export const useAuthStore = defineStore('auth', {\n//   state: () => ({ user: null, token: null }),\n//   actions: { login() { /* ... */ } }\n// });",
      "questionText": "In a Pinia store, what is the primary purpose of the `actions` section?",
      "options": [
        "To define the initial reactive data of the store.",
        "To define computed properties based on the store's state.",
        "To define methods that can modify the store's state (can be synchronous or asynchronous).",
        "To subscribe to changes in the store's state."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Actions in Pinia are methods used to commit state mutations. They can contain asynchronous logic (like API calls) and then modify the state using `this.propertyName = ...`."
    }
  },
  {
    "id": "nuxtjs-medium-server-middleware-005",
    "title": "Server Middleware (`server/middleware/`)",
    "difficulty": "medium",
    "framework": "Nuxt.js",
    "frameworkIconText": "Nuxt",
    "tags": [
      "server middleware",
      "nitro",
      "request lifecycle",
      "server-side logic"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Nuxt server middleware runs on the Nitro server for every request *before* any other server route or rendering happens. It's suitable for tasks like logging, modifying request headers, or handling authentication globally for server-side requests. Unlike Nuxt 2 middleware, this is purely server-side."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// server/middleware/logger.ts\n// (File name doesn't determine order, use numbered prefixes for order e.g., 01.logger.ts)\n\nexport default defineEventHandler((event) => {\n  console.log(`[SERVER MIDDLEWARE] New request: ${getRequestURL(event).pathname}`);\n  \n  // You can modify the event (e.g., add to event.context)\n  // event.context.user = { id: 123 }; // Example\n\n  // Does not return a response directly unless it's an error or redirect.\n  // To stop further processing and send a response, you would throw an error\n  // or use utilities like sendRedirect(). Otherwise, it passes through.\n});\n\n// server/middleware/auth.ts (example)\n// export default defineEventHandler((event) => {\n//   if (event.path.startsWith('/admin') && !event.context.userIsAdmin) {\n//     // throw createError({ statusCode: 403, statusMessage: 'Forbidden' });\n//     // return sendRedirect(event, '/login');\n//   }\n// });"
      },
      {
        "type": "explanation",
        "text": "Server middleware files are placed in `server/middleware/`. They export a default event handler. They can inspect or modify the request (`event`) before it reaches API routes or page rendering. They don't typically send a final response unless redirecting or erroring out."
      }
    ],
    "quiz": {
      "snippet": "// server/middleware/request-timing.ts\n// export default defineEventHandler((event) => {\n//   const start = Date.now();\n//   event.node.res.on('finish', () => {\n//     console.log(`Request to ${event.path} took ${Date.now() - start}ms`);\n//   });\n// });",
      "questionText": "What is a key characteristic of Nuxt 3 server middleware (located in `server/middleware/`)?",
      "options": [
        "It runs on both the client and server side for every route change.",
        "It primarily handles client-side UI interactions.",
        "It runs on the server for every incoming request before other server logic (like API routes or page rendering) and can modify the request or context.",
        "It is used for defining global Vue components."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Nuxt 3 server middleware executes on the server for every request before the request is handled by API routes or page rendering logic. It's useful for cross-cutting concerns like logging, authentication checks, or modifying request/response headers at the server level."
    }
  },
  {
    "id": "nestjs-medium-guards-auth-001",
    "title": "Authorization with Guards (`AuthGuard`)",
    "difficulty": "medium",
    "framework": "NestJS",
    "frameworkIconText": "NestJS",
    "tags": ["guards", "authorization", "AuthGuard", "CanActivate", "security"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Guards in NestJS determine whether a given request will be handled by the route handler or not, typically based on permissions or roles (authorization). They implement the `CanActivate` interface. Guards are executed after all middleware, but before any interceptor or pipe."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// src/auth/roles.guard.ts\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    // Get roles defined with @Roles decorator on the route handler\n    const requiredRoles = this.reflector.get<string[]>('roles', context.getHandler());\n    if (!requiredRoles) {\n      return true; // No roles required, access granted\n    }\n    const { user } = context.switchToHttp().getRequest(); // Assume user object is attached by an auth middleware/guard\n    return requiredRoles.some((role) => user?.roles?.includes(role));\n  }\n}\n\n// src/users/users.controller.ts\n// import { Controller, Get, UseGuards, SetMetadata } from '@nestjs/common';\n// import { RolesGuard } from '../auth/roles.guard';\n// const Roles = (...roles: string[]) => SetMetadata('roles', roles);\n\n// @Controller('users')\n// @UseGuards(RolesGuard) // Apply guard to all routes in this controller\n// export class UsersController {\n//   @Get('admin')\n//   @Roles('admin') // This route requires 'admin' role\n//   getAdminData() { return { data: 'Admin only data' }; }\n\n//   @Get('public')\n//   getPublicData() { return { data: 'Public data' }; }\n// }"
      },
      {
        "type": "explanation",
        "text": "The `RolesGuard` checks if the `user` object on the request (presumably attached by an authentication middleware or a preceding guard like Passport's `AuthGuard`) has any of the `requiredRoles`. Roles are attached to route handlers using a custom decorator (`@Roles` which uses `SetMetadata`)."
      }
    ],
    "quiz": {
      "snippet": "// @Injectable()\n// export class ApiKeyGuard implements CanActivate {\n//   canActivate(context: ExecutionContext): boolean {\n//     const request = context.switchToHttp().getRequest();\n//     return request.headers['x-api-key'] === 'secret-key';\n//   }\n// }\n// @UseGuards(ApiKeyGuard) @Get('secret-data')",
      "questionText": "What is the primary responsibility of a Guard in NestJS?",
      "options": [
        "To transform incoming request data.",
        "To transform outgoing response data.",
        "To determine if a request should be handled by a route handler, typically for authorization purposes.",
        "To log details about incoming requests."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Guards implement the `CanActivate` interface and are primarily used for authorization. They decide if a request is allowed to proceed to the route handler based on certain conditions (e.g., user roles, permissions, API keys)."
    }
  },
  {
    "id": "nestjs-medium-interceptors-002",
    "title": "Transforming Responses with Interceptors",
    "difficulty": "medium",
    "framework": "NestJS",
    "frameworkIconText": "NestJS",
    "tags": [
      "interceptors",
      "NestInterceptor",
      "tap",
      "map",
      "request-response cycle"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Interceptors in NestJS allow you to bind extra logic before/after route handler execution, transform the result returned from a route handler, or transform an exception thrown from it. They implement the `NestInterceptor` interface and leverage RxJS Observables."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// src/common/interceptors/transform.interceptor.ts\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response<T> {\n  statusCode: number;\n  message?: string;\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {\n    const httpContext = context.switchToHttp();\n    const response = httpContext.getResponse();\n    const statusCode = response.statusCode; // Get status code set by controller or default\n\n    return next.handle().pipe(\n      map(data => ({\n        statusCode: statusCode,\n        message: 'Success', // Or derive from data/context\n        data: data \n      }))\n    );\n  }\n}\n\n// Usage in main.ts or a specific controller/method:\n// app.useGlobalInterceptors(new TransformInterceptor());\n// or @UseInterceptors(TransformInterceptor) on controller/method"
      },
      {
        "type": "explanation",
        "text": "The `TransformInterceptor` wraps the response data from route handlers into a consistent structure (`{ statusCode, message, data }`). It uses the `map` RxJS operator to transform the data stream emitted by `next.handle()` (which represents the route handler's execution)."
      }
    ],
    "quiz": {
      "snippet": "// @Injectable()\n// export class LoggingInterceptor implements NestInterceptor {\n//   intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n//     console.log('Before...');\n//     const now = Date.now();\n//     return next.handle().pipe(\n//       tap(() => console.log(`After... ${Date.now() - now}ms`))\n//     );\n//   }\n// }",
      "questionText": "What can an Interceptor in NestJS be used for?",
      "options": [
        "Only for validating incoming request data.",
        "Only for authorizing requests before they reach a controller.",
        "To bind extra logic before/after method execution, transform results, or handle exceptions in a declarative way.",
        "To define the structure of database entities."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Interceptors provide a way to hook into the request/response cycle. They can transform data returned by a route handler (using `map`), perform actions before or after the handler executes (using `tap`), or even override the handler's execution entirely."
    }
  },
  {
    "id": "nestjs-medium-typeorm-basic-entity-repo-003",
    "title": "Database Interaction with TypeORM (Basic Entity & Repository)",
    "difficulty": "medium",
    "framework": "NestJS",
    "frameworkIconText": "NestTypeORM",
    "tags": [
      "typeorm",
      "database",
      "entity",
      "repository",
      "orm",
      "postgresql",
      "mysql"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "TypeORM is a popular Object-Relational Mapper (ORM) that can be used with NestJS for database interactions. You define entities (classes mapping to database tables) and use repositories to perform CRUD operations."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// src/users/user.entity.ts\n// You'd need to install @nestjs/typeorm typeorm pg (or other db driver)\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity() // Decorator to mark class as a TypeORM entity\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n}\n\n// src/users/users.service.ts\n// import { Injectable } from '@nestjs/common';\n// import { InjectRepository } from '@nestjs/typeorm';\n// import { Repository } from 'typeorm';\n// import { User } from './user.entity';\n// \n// @Injectable()\n// export class UsersService {\n//   constructor(\n//     @InjectRepository(User)\n//     private usersRepository: Repository<User>,\n//   ) {}\n// \n//   findAll(): Promise<User[]> {\n//     return this.usersRepository.find();\n//   }\n// \n//   findOne(id: number): Promise<User | null> {\n//     return this.usersRepository.findOneBy({ id });\n//   }\n//   // ... other CRUD methods (create, update, remove)\n// }\n\n// AppModule would need to import TypeOrmModule.forRoot({...dbConfig}) \n// and UsersModule would import TypeOrmModule.forFeature([User])"
      },
      {
        "type": "explanation",
        "text": "The `User` class is decorated with `@Entity()` and its properties with `@Column()` or `@PrimaryGeneratedColumn()` to map to a database table. The `UsersService` injects the `Repository<User>` for `User` entities, which provides methods like `find()`, `findOneBy()`, `save()`, `remove()`."
      }
    ],
    "quiz": {
      "snippet": "// @Entity()\n// export class Product {\n//   @PrimaryGeneratedColumn() id: number;\n//   @Column() name: string;\n// }\n// // In a service:\n// constructor(@InjectRepository(Product) private productRepo: Repository<Product>) {}\n// async getProduct(id: number) { return this.productRepo.findOneBy({ id }); }",
      "questionText": "In NestJS with TypeORM, what is the role of a class decorated with `@Entity()`?",
      "options": [
        "It defines a DTO for request validation.",
        "It represents a database table and its columns, mapping them to a class and its properties.",
        "It's a custom decorator for logging method calls.",
        "It's a service for handling business logic."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `@Entity()` decorator from TypeORM is used to mark a class as a database entity. Its properties, often decorated with `@Column()`, `@PrimaryGeneratedColumn()`, etc., map to the columns of the corresponding database table."
    }
  },
  {
    "id": "nestjs-medium-pipes-transformation-004",
    "title": "Data Transformation with Pipes (`ParseIntPipe`)",
    "difficulty": "medium",
    "framework": "NestJS",
    "frameworkIconText": "NestJS",
    "tags": [
      "pipes",
      "ParseIntPipe",
      "data transformation",
      "validation",
      "route parameters"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Pipes in NestJS can transform input data into a desired format. The built-in `ParseIntPipe` is used to ensure that a route parameter is a valid integer, converting it if possible, or throwing an exception if not."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// src/items/items.controller.ts\nimport { Controller, Get, Param, ParseIntPipe, NotFoundException } from '@nestjs/common';\n\n@Controller('items')\nexport class ItemsController {\n  private items = [\n    { id: 1, name: 'Item A' },\n    { id: 2, name: 'Item B' },\n  ];\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number): any {\n    // Thanks to ParseIntPipe, 'id' is guaranteed to be a number here.\n    // If the original param was not a valid number, ParseIntPipe would throw an error.\n    console.log(`Fetching item with ID: ${id}, type: ${typeof id}`);\n    const item = this.items.find(item => item.id === id);\n    if (!item) {\n      throw new NotFoundException(`Item with ID ${id} not found`);\n    }\n    return item;\n  }\n}\n\n// Ensure ItemsController is part of a module."
      },
      {
        "type": "explanation",
        "text": "`@Param('id', ParseIntPipe)` applies the `ParseIntPipe` to the `id` route parameter. If `id` from the URL (which is initially a string) can be successfully parsed into an integer, the `id` parameter in the `findOne` method will be a number. If parsing fails (e.g., URL is `/items/abc`), `ParseIntPipe` automatically throws a `BadRequestException`."
      }
    ],
    "quiz": {
      "snippet": "@Get(':orderId')\ngetOrder(@Param('orderId', ParseIntPipe) orderId: number) {\n  // ...\n}\n// A GET request is made to /orders/123ab",
      "questionText": "If a GET request is made to `/orders/123ab` and `ParseIntPipe` is applied to the `orderId` parameter, what will likely happen?",
      "options": [
        "The `orderId` parameter will be `123` (number).",
        "The `orderId` parameter will be `\"123ab\"` (string).",
        "An exception (typically `BadRequestException`) will be thrown because '123ab' cannot be parsed into an integer.",
        "The route will not be matched."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`ParseIntPipe` attempts to convert the route parameter string to an integer. If the string is not a valid representation of an integer (like '123ab'), the pipe will throw an exception (usually a `BadRequestException`), and NestJS's exception handling mechanism will take over."
    }
  },
  {
    "id": "nestjs-medium-exception-filters-005",
    "title": "Custom Exception Filters",
    "difficulty": "medium",
    "framework": "NestJS",
    "frameworkIconText": "NestJS",
    "tags": [
      "exception filters",
      "error handling",
      "@Catch",
      "ArgumentsHost",
      "HttpException"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Exception filters in NestJS allow you to catch unhandled exceptions across your application (or specific parts of it) and customize the JSON response sent back to the client. This is useful for standardizing error responses."
      },
      {
        "type": "code",
        "language": "typescript",
        "code": "// src/common/filters/http-exception.filter.ts\nimport { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\nimport { Request, Response } from 'express'; // Or from @types/express\n\n@Catch(HttpException) // Catches only HttpExceptions\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const request = ctx.getRequest<Request>();\n    const status = exception.getStatus();\n    const exceptionResponse = exception.getResponse();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n        message: typeof exceptionResponse === 'string' \n                 ? exceptionResponse \n                 : (exceptionResponse as any).message || exception.message,\n        // ...(typeof exceptionResponse === 'object' && exceptionResponse !== null && { errorDetails: exceptionResponse })\n      });\n  }\n}\n\n// main.ts (to apply globally)\n// async function bootstrap() {\n//   const app = await NestFactory.create(AppModule);\n//   app.useGlobalFilters(new HttpExceptionFilter()); // Apply filter globally\n//   await app.listen(3000);\n// }\n// bootstrap();"
      },
      {
        "type": "explanation",
        "text": "The `HttpExceptionFilter` implements `ExceptionFilter` and is decorated with `@Catch(HttpException)` to only handle exceptions of that type. The `catch` method receives the exception and `ArgumentsHost` (to get request/response objects). It then formats a custom JSON error response."
      }
    ],
    "quiz": {
      "snippet": "@Catch(TypeError) // Only catches TypeError exceptions\nexport class TypeErrFilter implements ExceptionFilter {\n  catch(exception: TypeError, host: ArgumentsHost) { /* ... */ }\n}",
      "questionText": "What is the main purpose of an Exception Filter in NestJS?",
      "options": [
        "To validate incoming DTOs.",
        "To authorize user requests.",
        "To catch unhandled exceptions that occur during request processing and format a standardized response to the client.",
        "To transform data before it's sent in a response."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Exception filters are responsible for processing unhandled exceptions across the application (or parts of it specified by `@Catch()`) and crafting an appropriate, user-friendly response to send back to the client, often in a standardized JSON format."
    }
  },
  {
    "id": "express-medium-router-001",
    "title": "Modular Routing with `express.Router`",
    "difficulty": "medium",
    "framework": "Express.js",
    "frameworkIconText": "Express",
    "tags": [
      "express",
      "router",
      "modular routing",
      "express.Router",
      "code organization"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "For larger applications, it's good practice to organize routes into separate modules using `express.Router`. This helps keep your main application file clean and your routes manageable."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// routes/users.js\nconst express = require('express');\nconst router = express.Router(); // Create a new router object\n\n// Middleware specific to this router\nrouter.use((req, res, next) => {\n  console.log('Time for user routes: ', Date.now());\n  next();\n});\n\n// Define routes on the router\nrouter.get('/', (req, res) => {\n  res.send('User list'); // Handles GET /users/\n});\n\nrouter.get('/:id', (req, res) => {\n  res.send(`User profile for ID: ${req.params.id}`); // Handles GET /users/:id\n});\n\nmodule.exports = router; // Export the router\n\n// server.js (main application file)\n// const express = require('express');\n// const app = express();\n// const userRoutes = require('./routes/users'); // Import the users router\n// \n// // Mount the users router on the /users path\n// app.use('/users', userRoutes);\n// \n// app.listen(3000);"
      },
      {
        "type": "explanation",
        "text": "In `users.js`, an `express.Router()` instance is created. Routes are defined on this `router` object. In `server.js`, this router is imported and then mounted on a specific path (`/users`) using `app.use('/users', userRoutes)`. All routes defined in `users.js` will now be prefixed with `/users`."
      }
    ],
    "quiz": {
      "snippet": "// routes/products.js\n// const router = express.Router();\n// router.get('/all', (req, res) => { /* ... */ });\n// module.exports = router;\n\n// server.js\n// const productRoutes = require('./routes/products');\n// app.use('/api/products', productRoutes);",
      "questionText": "If `productRoutes` (which defines a GET handler for `/all`) is mounted on `/api/products` in `server.js`, what is the full URL path to access the `/all` route?",
      "options": [
        "/all",
        "/products/all",
        "/api/products/all",
        "/api/all/products"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "When a router is mounted using `app.use('/api/products', productRoutes)`, all routes defined within `productRoutes` are prefixed with `/api/products`. So, a route `/all` in `productRoutes` becomes `/api/products/all`."
    }
  },
  {
    "id": "express-medium-error-handling-002",
    "title": "Error Handling Middleware",
    "difficulty": "medium",
    "framework": "Express.js",
    "frameworkIconText": "Express",
    "tags": ["express", "error handling", "middleware", "next(err)"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Express has a default error handler, but you can define custom error-handling middleware. These are special middleware functions that have four arguments (`err`, `req`, `res`, `next`). They must be defined *after* all other `app.use()` and routes calls."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const express = require('express');\nconst app = express();\n\napp.get('/user/:id', (req, res, next) => {\n  const userId = parseInt(req.params.id);\n  if (isNaN(userId)) {\n    const err = new Error('Invalid User ID: Must be a number.');\n    err.status = 400; // Custom status code\n    return next(err); // Pass error to error-handling middleware\n  }\n  res.send(`User ID is ${userId}`);\n});\n\n// Custom 404 Not Found handler (if no routes match)\napp.use((req, res, next) => {\n  res.status(404).send('Sorry, that route does not exist.');\n});\n\n// Custom error-handling middleware (must have 4 arguments)\napp.use((err, req, res, next) => {\n  console.error(err.stack); // Log the error stack for debugging\n  const statusCode = err.status || 500; // Use error's status or default to 500\n  res.status(statusCode).json({\n    error: {\n      message: err.message || 'Internal Server Error',\n      status: statusCode\n    }\n  });\n});\n\napp.listen(3000);"
      },
      {
        "type": "explanation",
        "text": "If a route handler calls `next(err)` with an error object, Express skips all subsequent non-error-handling middleware and route handlers and jumps directly to error-handling middleware (those defined with `(err, req, res, next)`). This allows for centralized error response formatting."
      }
    ],
    "quiz": {
      "snippet": "app.get('/data', (req, res, next) => {\n  // if (someConditionFails) return next(new Error('Failed!'));\n  res.send('Success');\n});\n// app.use((err, req, res, next) => { /* ... */ });",
      "questionText": "In an Express route handler, how do you typically pass an error to a custom error-handling middleware function?",
      "options": [
        "By throwing the error directly: `throw new Error('Failed!');`",
        "By calling `res.sendError(err)`",
        "By calling the `next()` function with an error object as its argument: `next(err)`",
        "By setting `req.error = err`"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "To trigger Express's error handling mechanism and pass control to an error-handling middleware, you call `next(err)` with an error object. Throwing an error directly in synchronous code will also be caught by Express, but `next(err)` is the standard for both sync and async errors within the Express flow."
    }
  },
  {
    "id": "express-medium-formdata-parsing-003",
    "title": "Handling `multipart/form-data` (Conceptual)",
    "difficulty": "medium",
    "framework": "Express.js",
    "frameworkIconText": "Express",
    "tags": [
      "express",
      "forms",
      "multipart/form-data",
      "file uploads",
      "middleware"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "When dealing with file uploads or complex form data, requests are often sent with `Content-Type: multipart/form-data`. Express's built-in `express.json()` and `express.urlencoded()` middleware do not handle this format. You typically need specialized middleware like 'multer' for robust file upload handling."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// server.js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// For actual file uploads, 'multer' middleware is recommended.\n// This example is conceptual to show where parsing would happen.\n\n// Middleware to log content type - a real parser would be more complex\napp.use('/upload', (req, res, next) => {\n  console.log('Request Content-Type:', req.get('Content-Type'));\n  if (req.is('multipart/form-data')) {\n    console.log('Multipart form data detected. Specialized parser needed (e.g., multer).');\n    // With multer, files would be in req.files, text fields in req.body\n  }\n  next();\n});\n\napp.post('/upload', (req, res) => {\n  // If multer was used: \n  // console.log('Files:', req.files);\n  // console.log('Body:', req.body);\n  res.send('Upload endpoint hit. Check server logs. For actual uploads, use a library like Multer.');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});"
      },
      {
        "type": "explanation",
        "text": "This conceptual example shows a middleware that logs the content type. For actual `multipart/form-data` parsing (especially file uploads), libraries like `multer` inspect the request stream, parse out files and text fields, and make them available on `req.files` and `req.body` respectively."
      }
    ],
    "quiz": {
      "snippet": "// Client sends a POST request with a file and some text fields,\n// using Content-Type: multipart/form-data.",
      "questionText": "Why is specialized middleware like `multer` generally required in Express to handle `multipart/form-data` requests, especially those involving file uploads?",
      "options": [
        "Express cannot handle POST requests by default.",
        "Standard body parsers like `express.json()` and `express.urlencoded()` do not process `multipart/form-data` streams or file uploads.",
        "It's needed for URL rewriting.",
        "It automatically compresses uploaded files."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Express's built-in body parsing middleware (`express.json`, `express.urlencoded`) are not designed to handle the `multipart/form-data` encoding type, which is used for file uploads and complex form submissions. Libraries like `multer` are specifically built to parse these types of requests."
    }
  },
  {
    "id": "express-medium-request-body-parsing-004",
    "title": "Parsing Request Bodies (`express.json`, `express.urlencoded`)",
    "difficulty": "medium",
    "framework": "Express.js",
    "frameworkIconText": "Express",
    "tags": [
      "express",
      "request body",
      "middleware",
      "express.json",
      "express.urlencoded",
      "forms",
      "api"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "When clients send data in the body of a request (e.g., from HTML forms or JSON payloads in API calls), you need middleware to parse this data and make it available in `req.body`. Express provides `express.json()` for JSON and `express.urlencoded()` for URL-encoded data (like form submissions)."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const express = require('express');\nconst app = express();\n\n// Middleware to parse JSON request bodies\napp.use(express.json());\n\n// Middleware to parse URL-encoded request bodies (e.g., from HTML forms)\napp.use(express.urlencoded({ extended: true })); // extended: true allows rich objects/arrays\n\napp.post('/api/users', (req, res) => {\n  // If client sent JSON: { \"name\": \"Alice\", \"age\": 30 }\n  // req.body will be { \"name\": \"Alice\", \"age\": 30 }\n  const newUser = req.body;\n  console.log('Creating user:', newUser);\n  res.status(201).json({ \"message\": \"User created\", \"user\": newUser });\n});\n\napp.post('/contact-form', (req, res) => {\n  // If HTML form submitted with name=\"email\" and name=\"message\"\n  // req.body will be { \"email\": \"...\", \"message\": \"...\" }\n  const formData = req.body;\n  console.log('Form data:', formData);\n  res.send('Form received. Thanks!');\n});\n\napp.listen(3000);"
      },
      {
        "type": "explanation",
        "text": "`app.use(express.json())` adds middleware that checks if `Content-Type` is `application/json` and parses the body. `app.use(express.urlencoded({ extended: true }))` parses `application/x-www-form-urlencoded` bodies. The parsed data is then populated into `req.body`."
      }
    ],
    "quiz": {
      "snippet": "app.use(express.json());\napp.post('/items', (req, res) => {\n  const newItem = req.body; // What is req.body here?\n  // ...\n});\n// Client sends a POST request with Content-Type 'application/json'\n// and body: { \"name\": \"Laptop\", \"price\": 1200 }",
      "questionText": "If `express.json()` middleware is used and a client sends a JSON payload in a POST request, what will `req.body` contain in the route handler?",
      "options": [
        "The raw JSON string.",
        "A Buffer containing the request body.",
        "A JavaScript object parsed from the JSON string.",
        "It will be undefined unless `express.text()` is also used."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `express.json()` middleware parses incoming requests with `Content-Type: application/json` and populates `req.body` with the parsed JavaScript object."
    }
  },
  {
    "id": "express-medium-query-parameters-005",
    "title": "Handling URL Query Parameters (`req.query`)",
    "difficulty": "medium",
    "framework": "Express.js",
    "frameworkIconText": "Express",
    "tags": [
      "express",
      "query parameters",
      "req.query",
      "url parsing",
      "filtering",
      "sorting"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Query parameters are key-value pairs appended to a URL after a question mark (`?`), used for things like filtering, sorting, or pagination (e.g., `/search?term=express&limit=10`). Express makes these available in the `req.query` object."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const express = require('express');\nconst app = express();\n\n// Example URL: /products?category=electronics&sortBy=price&page=2\napp.get('/products', (req, res) => {\n  const category = req.query.category; // 'electronics'\n  const sortBy = req.query.sortBy;     // 'price'\n  const page = parseInt(req.query.page) || 1; // '2', parsed to number, default 1\n\n  let responseText = 'Fetching products';\n  if (category) {\n    responseText += ` in category: ${category}`;\n  }\n  if (sortBy) {\n    responseText += ` sorted by: ${sortBy}`;\n  }\n  responseText += ` on page: ${page}`;\n  \n  res.send(responseText);\n  // In a real app, you'd use these parameters to query a database.\n});\n\napp.listen(3000);"
      },
      {
        "type": "explanation",
        "text": "If a request is made to `/products?category=electronics&sortBy=price`, then `req.query` will be an object like `{ category: 'electronics', sortBy: 'price' }`. Values are typically strings, so you might need to parse them (e.g., `parseInt` for numbers)."
      }
    ],
    "quiz": {
      "snippet": "app.get('/api/items', (req, res) => {\n  const limit = req.query.limit; // Assume URL is /api/items?limit=20&offset=0\n  // ...\n});",
      "questionText": "If a GET request is made to `/api/items?limit=20&offset=0`, what will be the value of `req.query.limit`?",
      "options": [
        "20 (as a number)",
        "\"20\" (as a string)",
        "\"limit=20\"",
        "undefined"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Query parameters are parsed into the `req.query` object. The values are initially strings. So, `req.query.limit` will be the string \"20\". You would need to use `parseInt(req.query.limit)` if you need it as a number."
    }
  },
  {
    "id": "tailwind-medium-grid-layout-001",
    "title": "Grid Layout Basics",
    "difficulty": "medium",
    "framework": "Tailwind CSS",
    "frameworkIconText": "TW",
    "tags": [
      "tailwind",
      "grid",
      "layout",
      "grid-cols",
      "gap",
      "responsive grid"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Tailwind CSS provides comprehensive utilities for creating grid layouts. You can define the number of columns (`grid-cols-{n}`), gaps between grid items (`gap-{size}`, `gap-x-{size}`, `gap-y-{size}`), and control how items span across columns/rows."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 p-4 bg-gray-100\">\n  <!-- \n    - grid: Establishes a grid container.\n    - grid-cols-1: 1 column by default (mobile).\n    - sm:grid-cols-2: 2 columns on small screens (640px+) and up.\n    - md:grid-cols-3: 3 columns on medium screens (768px+) and up.\n    - gap-6: Adds a 1.5rem gap between all grid items.\n  -->\n  <div class=\"bg-blue-500 text-white p-4 rounded shadow-md\">Item 1</div>\n  <div class=\"bg-green-500 text-white p-4 rounded shadow-md\">Item 2</div>\n  <div class=\"bg-red-500 text-white p-4 rounded shadow-md\">Item 3</div>\n  <div class=\"bg-purple-500 text-white p-4 rounded shadow-md md:col-span-2\">\n    Item 4 (spans 2 columns on md+)\n  </div>\n  <div class=\"bg-yellow-500 text-white p-4 rounded shadow-md\">Item 5</div>\n</div>"
      },
      {
        "type": "explanation",
        "text": "This example creates a responsive grid. It starts as a single column, becomes two columns on `sm` screens, and three columns on `md` screens. `gap-6` creates space between items. `md:col-span-2` makes 'Item 4' take up two column widths on medium screens and larger."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"grid grid-cols-4 gap-4\">\n  <div class=\"col-span-2 bg-sky-200\">A</div>\n  <div class=\"bg-sky-200\">B</div>\n  <div class=\"col-span-1 bg-sky-200\">C</div>\n</div>",
      "questionText": "How many grid cells will item 'A' occupy horizontally in this 4-column grid?",
      "options": ["1 cell", "2 cells", "3 cells", "4 cells"],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The class `col-span-2` applied to item 'A' makes it span across two columns in the defined 4-column grid (`grid-cols-4`)."
    }
  },
  {
    "id": "tailwind-medium-customization-config-002",
    "title": "Basic Theme Customization (`tailwind.config.js`)",
    "difficulty": "medium",
    "framework": "Tailwind CSS",
    "frameworkIconText": "TW",
    "tags": [
      "tailwind",
      "configuration",
      "tailwind.config.js",
      "theme",
      "colors",
      "fonts"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "While Tailwind provides a vast default theme, you'll often want to customize it (e.g., add brand colors, custom fonts, or tweak spacing). This is done in the `tailwind.config.js` file, primarily within the `theme.extend` object to add to or override defaults."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// tailwind.config.js\nmodule.exports = {\n  content: [\"./src/**/*.{html,js,jsx,ts,tsx,vue,svelte}\"],\n  theme: {\n    extend: { // Use extend to add to existing theme values\n      colors: {\n        'brand-primary': '#3490dc',\n        'brand-secondary': '#ffed4a',\n        'custom-gray': {\n          100: '#f7fafc',\n          900: '#1a202c',\n        },\n      },\n      fontFamily: {\n        'sans': ['Inter', 'system-ui', 'sans-serif'],\n        'serif': ['Georgia', 'serif'],\n        'display': ['Oswald', 'sans-serif'],\n      },\n      spacing: {\n        '128': '32rem', // Adds p-128, m-128, w-128, h-128 etc.\n      }\n    },\n  },\n  plugins: [],\n}\n\n// Usage in HTML:\n// <button class=\"bg-brand-primary text-white\">My Brand Button</button>\n// <p class=\"font-display text-custom-gray-900\">Display Text</p>\n// <div class=\"mt-128\">Extra Margin</div>"
      },
      {
        "type": "explanation",
        "text": "Inside `theme.extend`, we've added custom colors like `brand-primary`, new font families like `font-display`, and an additional spacing unit `128`. These new utilities can now be used in your HTML just like built-in Tailwind classes."
      }
    ],
    "quiz": {
      "snippet": "// tailwind.config.js\n// theme: {\n//   extend: {\n//     colors: { 'special-blue': '#007bff' }\n//   }\n// }",
      "questionText": "If you define a custom color `special-blue` in `tailwind.config.js` as shown, how would you apply it as a background color to a div?",
      "options": [
        "<div class=\"bg-#007bff\"></div>",
        "<div class=\"background-special-blue\"></div>",
        "<div class=\"color-special-blue\"></div>",
        "<div class=\"bg-special-blue\"></div>"
      ],
      "correctOptionIndex": 3,
      "explanationAfterAnswer": "When you extend the theme's colors with a key like `'special-blue'`, Tailwind automatically generates utility classes like `bg-special-blue` for background, `text-special-blue` for text color, `border-special-blue` for border color, etc."
    }
  },
  {
    "id": "tailwind-medium-dark-mode-003",
    "title": "Implementing Dark Mode",
    "difficulty": "medium",
    "framework": "Tailwind CSS",
    "frameworkIconText": "TW",
    "tags": ["tailwind", "dark mode", "darkMode class", "responsive variants"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Tailwind CSS supports dark mode styling using the `dark:` variant. You enable it in `tailwind.config.js` (usually with the `class` strategy, where a `.dark` class on the `<html>` or `<body>` element activates dark styles) and then prefix utilities with `dark:`."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// tailwind.config.js\nmodule.exports = {\n  darkMode: 'class', // or 'media' for OS-preference based dark mode\n  content: [/* ... */],\n  theme: { extend: {} },\n  plugins: [],\n};\n\n// HTML structure (with a class toggle for 'dark' on <html> or <body>)\n// <html class=\"dark\"> or <body>\n// <script>\n//   // Logic to toggle 'dark' class based on user preference or system setting\n//   if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n//     document.documentElement.classList.add('dark');\n//   } else {\n//     document.documentElement.classList.remove('dark');\n//   }\n// </script>\n\n// Example usage in a component:\n// <div class=\"bg-white text-gray-900 dark:bg-gray-800 dark:text-gray-100 p-4\">\n//   <p>This component adapts to dark mode.</p>\n//   <button class=\"bg-blue-500 hover:bg-blue-600 text-white \n//                  dark:bg-yellow-400 dark:hover:bg-yellow-500 dark:text-gray-900\">\n//     A Button\n//   </button>\n// </div>"
      },
      {
        "type": "explanation",
        "text": "With `darkMode: 'class'`, Tailwind generates dark mode variants like `dark:bg-gray-800`. These styles are applied only when an ancestor element (usually `<html>` or `<body>`) has the class `dark`. You'll need JavaScript to toggle this class based on user preference or system settings."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"bg-zinc-100 dark:bg-zinc-900\">\n  <p class=\"text-black dark:text-white\">Hello</p>\n</div>\n<!-- Assuming darkMode: 'class' is set in tailwind.config.js -->",
      "questionText": "If the `<html>` tag has the class `dark`, what will be the background color of the `div` and text color of the `p` tag?",
      "options": [
        "bg-zinc-100, text-black",
        "bg-zinc-900, text-white",
        "bg-zinc-100, text-white",
        "bg-zinc-900, text-black"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "When the `dark` class is present on an ancestor, `dark:` prefixed utilities take effect. So, `dark:bg-zinc-900` will set the background to zinc-900, and `dark:text-white` will set the text color to white."
    }
  },
  {
    "id": "tailwind-medium-apply-directive-004",
    "title": "Grouping Utilities with `@apply`",
    "difficulty": "medium",
    "framework": "Tailwind CSS",
    "frameworkIconText": "TW",
    "tags": ["tailwind", "@apply", "css", "component classes", "reusability"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "While utility-first is powerful, sometimes you might want to extract common utility patterns into custom CSS classes. Tailwind's `@apply` directive lets you inline existing utility classes into your own CSS rules. This is often used for component-like classes or to avoid repeating long strings of utilities in HTML."
      },
      {
        "type": "code",
        "language": "css",
        "code": "/* styles.css (or your main CSS file processed by Tailwind) */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.btn {\n  @apply py-2 px-4 font-semibold rounded-lg shadow-md;\n}\n\n.btn-primary {\n  @apply btn bg-blue-500 text-white hover:bg-blue-700;\n  /* You can also add custom CSS here */\n  /* border-bottom: 3px solid darkblue; */\n}\n\n.btn-secondary {\n  @apply btn bg-gray-500 text-white hover:bg-gray-700;\n}\n\n/* HTML Usage: */\n/* <button class=\"btn-primary\">Primary Button</button> */\n/* <button class=\"btn-secondary\">Secondary Button</button> */"
      },
      {
        "type": "explanation",
        "text": "Here, `.btn` is a base class created using `@apply` with common button utilities. `.btn-primary` and `.btn-secondary` then `@apply` the `.btn` styles and add their own specific background and text colors. This helps keep HTML cleaner when these button styles are used frequently."
      },
      {
        "type": "important",
        "text": "Overuse of `@apply` can sometimes negate the benefits of utility-first if you end up creating too many custom classes. Use it judiciously for common, repeated patterns or true component abstractions."
      }
    ],
    "quiz": {
      "snippet": "/* styles.css */\n.card {\n  @apply p-4 bg-white rounded shadow-lg;\n}\n/* HTML: <div class=\"card\">...</div> */",
      "questionText": "What is the primary function of the `@apply` directive in Tailwind CSS?",
      "options": [
        "To import external CSS files.",
        "To define new utility classes from scratch.",
        "To inline existing Tailwind utility classes into your custom CSS rules or component classes.",
        "To apply JavaScript functions to HTML elements."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `@apply` directive allows you to extract repeated utility patterns into custom CSS classes by inlining Tailwind's utility classes directly into your CSS. This is useful for creating component-like classes or keeping HTML cleaner."
    }
  },
  {
    "id": "tailwind-medium-plugins-forms-typography-005",
    "title": "Using Official Plugins (e.g., Forms, Typography)",
    "difficulty": "medium",
    "framework": "Tailwind CSS",
    "frameworkIconText": "TW",
    "tags": [
      "tailwind",
      "plugins",
      "@tailwindcss/forms",
      "@tailwindcss/typography",
      "styling reset"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Tailwind provides official plugins for common use cases where basic utilities might not be enough, such as styling form elements consistently or providing sensible defaults for prose/markdown content. `@tailwindcss/forms` and `@tailwindcss/typography` are two popular examples."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// tailwind.config.js\nmodule.exports = {\n  content: [/* ... */],\n  theme: { extend: {} },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n    // require('@tailwindcss/aspect-ratio'), // another example\n  ],\n};\n\n// HTML example using @tailwindcss/forms (provides base styles for inputs)\n// <form class=\"space-y-4\">\n//   <label class=\"block\">\n//     <span class=\"text-gray-700\">Email</span>\n//     <input type=\"email\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\" placeholder=\"you@example.com\">\n//   </label>\n// </form>\n\n// HTML example using @tailwindcss/typography (for styling markdown/html content)\n// <article class=\"prose lg:prose-xl\">\n//   <h1>My Blog Post</h1>\n//   <p>Some paragraph text formatted by the typography plugin...</p>\n//   <ul><li>List item</li></ul>\n// </article>"
      },
      {
        "type": "explanation",
        "text": "After installing a plugin (e.g., `npm install -D @tailwindcss/forms`), you add it to the `plugins` array in `tailwind.config.js`. The `@tailwindcss/forms` plugin provides a basic reset and some default styling for form elements. The `@tailwindcss/typography` plugin (used with the `prose` class) provides beautiful typographic defaults for HTML generated from Markdown or a CMS."
      }
    ],
    "quiz": {
      "snippet": "// tailwind.config.js\n// plugins: [\n//   require('@tailwindcss/forms'),\n// ]\n// HTML:\n// <input type=\"text\" class=\"border-gray-300 rounded-md\">",
      "questionText": "What is a common benefit of using the `@tailwindcss/forms` plugin?",
      "options": [
        "It adds JavaScript validation to forms.",
        "It provides a basic reset and more opinionated default styling for form elements (inputs, selects, etc.), making them easier to customize with utilities.",
        "It automatically submits form data via AJAX.",
        "It generates complex form layouts with multiple columns."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `@tailwindcss/forms` plugin provides a style reset for native form elements, making them easier to style consistently with Tailwind utility classes. It offers a set of sensible defaults that you can then build upon."
    }
  },
  {
    "id": "bootstrap-medium-advanced-grid-001",
    "title": "Advanced Grid: Offsetting, Ordering, and Nesting",
    "difficulty": "medium",
    "framework": "Bootstrap",
    "frameworkIconText": "BS",
    "tags": [
      "bootstrap",
      "grid system",
      "offset",
      "order",
      "nesting",
      "responsive layout"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bootstrap's grid system offers more than just column sizing. You can offset columns (`offset-md-2`), reorder them visually (`order-md-1`), and nest rows and columns within other columns for complex layouts."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div class=\"container\">\n  <!-- Offsetting -->\n  <div class=\"row mb-3\">\n    <div class=\"col-md-4 offset-md-4 bg-primary text-white p-2\">Centered 4-col</div>\n  </div>\n\n  <!-- Ordering -->\n  <div class=\"row mb-3\">\n    <div class=\"col-md-6 order-md-2 bg-success text-white p-2\">Appears Second (but first in code)</div>\n    <div class=\"col-md-6 order-md-1 bg-warning p-2\">Appears First (but second in code)</div>\n  </div>\n\n  <!-- Nesting -->\n  <div class=\"row\">\n    <div class=\"col-sm-9 bg-info p-2\">\n      Level 1: col-sm-9\n      <div class=\"row\">\n        <div class=\"col-8 col-sm-6 bg-light p-1\">Level 2: col-8 col-sm-6</div>\n        <div class=\"col-4 col-sm-6 bg-dark text-white p-1\">Level 2: col-4 col-sm-6</div>\n      </div>\n    </div>\n  </div>\n</div>"
      },
      {
        "type": "explanation",
        "text": "`offset-md-4` pushes the column 4 units to the right on medium screens and up. `order-md-2` changes the visual order of the column on medium screens (default order is based on source order). Nested rows and columns allow for intricate layouts within a parent column."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"row\">\n  <div class=\"col-md-3 offset-md-3\">Content</div>\n</div>",
      "questionText": "What is the effect of `offset-md-3` on the `div`?",
      "options": [
        "It makes the column 3 units wider on medium screens.",
        "It pushes the column 3 units to the left on medium screens.",
        "It pushes the column 3 units to the right on medium screens, creating an empty space of 3 columns before it.",
        "It sets the column's order to 3 on medium screens."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `offset-md-3` class moves the column to the right by 3 column units on medium screens and larger, effectively creating a 3-column gap to its left."
    }
  },
  {
    "id": "bootstrap-medium-forms-validation-002",
    "title": "Forms with Validation States",
    "difficulty": "medium",
    "framework": "Bootstrap",
    "frameworkIconText": "BS",
    "tags": [
      "bootstrap",
      "forms",
      "validation",
      "is-valid",
      "is-invalid",
      "feedback"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bootstrap provides styles for form validation states, indicating to users whether their input is valid or invalid. This is often used in conjunction with JavaScript for client-side or server-side validation feedback."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<form class=\"row g-3 needs-validation\" novalidate>\n  <div class=\"col-md-6\">\n    <label for=\"validationServer01\" class=\"form-label\">First name</label>\n    <input type=\"text\" class=\"form-control is-valid\" id=\"validationServer01\" value=\"Mark\" required>\n    <div class=\"valid-feedback\">\n      Looks good!\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n    <label for=\"validationServerUsername\" class=\"form-label\">Username</label>\n    <div class=\"input-group has-validation\">\n      <span class=\"input-group-text\" id=\"inputGroupPrepend3\">@</span>\n      <input type=\"text\" class=\"form-control is-invalid\" id=\"validationServerUsername\" aria-describedby=\"inputGroupPrepend3 validationServerUsernameFeedback\" required>\n      <div id=\"validationServerUsernameFeedback\" class=\"invalid-feedback\">\n        Please choose a username.\n      </div>\n    </div>\n  </div>\n  <div class=\"col-12\">\n    <button class=\"btn btn-primary\" type=\"submit\">Submit form</button>\n  </div>\n</form>\n\n<!-- Basic JavaScript for disabling form submissions if there are invalid fields (from Bootstrap docs) -->\n<!-- <script>\n  (() => {\n    'use strict'\n    const forms = document.querySelectorAll('.needs-validation')\n    Array.from(forms).forEach(form => {\n      form.addEventListener('submit', event => {\n        if (!form.checkValidity()) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n        form.classList.add('was-validated')\n      }, false)\n    })\n  })()\n</script> -->"
      },
      {
        "type": "explanation",
        "text": "The classes `.is-valid` and `.is-invalid` are applied to form controls (like `<input>`) to style them based on their validation state. Corresponding feedback messages can be shown using `.valid-feedback` or `.invalid-feedback`. The `novalidate` attribute on the form prevents browser default validation. Bootstrap's example JS shows how to trigger these styles after submission attempt."
      }
    ],
    "quiz": {
      "snippet": "<input type=\"email\" class=\"form-control is-invalid\" required>\n<div class=\"invalid-feedback\">Please provide a valid email.</div>",
      "questionText": "What is the visual effect of applying the `.is-invalid` class to an input field in Bootstrap?",
      "options": [
        "It disables the input field.",
        "It styles the input field with a green border and checkmark icon.",
        "It styles the input field with a red border and an error icon, and makes the associated `.invalid-feedback` message visible.",
        "It clears the input field's value."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `.is-invalid` class typically adds a red border to the input field, often an error icon (like an exclamation mark), and ensures that any sibling element with the class `.invalid-feedback` is displayed."
    }
  },
  {
    "id": "bootstrap-medium-navbar-003",
    "title": "Creating a Responsive Navbar",
    "difficulty": "medium",
    "framework": "Bootstrap",
    "frameworkIconText": "BS",
    "tags": [
      "bootstrap",
      "navbar",
      "navigation",
      "responsive",
      "collapse",
      "dropdowns"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bootstrap's navbar component is a powerful and responsive navigation header. It supports branding, navigation links, forms, dropdowns, and collapses on smaller screens into a toggleable menu. Requires Bootstrap's JavaScript."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div class=\"container-fluid\">\n    <a class=\"navbar-brand\" href=\"#\">MyApp</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">Features</a>\n        </li>\n        <li class=\"nav-item dropdown\">\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n            Dropdown link\n          </a>\n          <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n            <li><a class=\"dropdown-item\" href=\"#\">Action</a></li>\n            <li><a class=\"dropdown-item\" href=\"#\">Another action</a></li>\n          </ul>\n        </li>\n      </ul>\n      <form class=\"d-flex\">\n        <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n        <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n</nav>\n\n<!-- Requires Bootstrap JS for toggler and dropdowns -->"
      },
      {
        "type": "explanation",
        "text": "`navbar-expand-lg` makes the navbar expand (show all links horizontally) on large screens and up, and collapse on smaller screens. The `navbar-toggler` button controls the visibility of the collapsible content (`#navbarNavDropdown`). `navbar-dark bg-dark` provides a dark theme."
      }
    ],
    "quiz": {
      "snippet": "<nav class=\"navbar navbar-expand-md navbar-light bg-light\">\n  <!-- ... navbar content ... -->\n</nav>",
      "questionText": "What does the class `navbar-expand-md` on a Bootstrap navbar primarily control?",
      "options": [
        "The background color of the navbar on medium screens.",
        "The breakpoint at which the navbar collapses into a mobile-friendly toggleable menu (in this case, below medium screens).",
        "The maximum width of the navbar on medium screens.",
        "The font size of navbar links on medium screens."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "`navbar-expand-{breakpoint}` (e.g., `navbar-expand-md`) determines at which screen size the navbar's collapsible content will be shown horizontally. Below that breakpoint, it will be hidden and accessible via the toggler button."
    }
  },
  {
    "id": "bootstrap-medium-modal-dialog-004",
    "title": "Creating Modal Dialogs",
    "difficulty": "medium",
    "framework": "Bootstrap",
    "frameworkIconText": "BS",
    "tags": ["bootstrap", "modal", "dialog", "popup", "javascript component"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Modals are streamlined, but flexible, dialog prompts. They are used to display information, forms, or require user interaction without navigating away from the current page. Requires Bootstrap's JavaScript."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- Button to trigger modal -->\n<button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\n  Launch demo modal\n</button>\n\n<!-- Modal Structure -->\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div class=\"modal-body\">\n        <p>Modal body text goes here.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Requires Bootstrap JS for modal functionality -->"
      },
      {
        "type": "explanation",
        "text": "A button with `data-bs-toggle=\"modal\"` and `data-bs-target=\"#modalId\"` is used to trigger the modal. The modal itself is a `div` with class `.modal` and an ID matching the target. It contains sub-sections like `.modal-header`, `.modal-body`, and `.modal-footer`. `data-bs-dismiss=\"modal\"` on buttons closes the modal."
      }
    ],
    "quiz": {
      "snippet": "<button data-bs-toggle=\"modal\" data-bs-target=\"#myInfoModal\">Show Info</button>\n\n<div class=\"modal fade\" id=\"myInfoModal\">\n  <!-- ... modal content ... -->\n</div>",
      "questionText": "How is a Bootstrap modal typically triggered to open?",
      "options": [
        "By adding an `open` class to the modal div via JavaScript.",
        "By clicking an element (often a button) that has `data-bs-toggle=\"modal\"` and `data-bs-target` attributes pointing to the modal's ID.",
        "By navigating to a specific URL hash that matches the modal's ID.",
        "Modals open automatically when the page loads."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "Bootstrap modals are typically triggered by user interaction with an element (like a button) that has the `data-bs-toggle=\"modal\"` attribute and a `data-bs-target` attribute specifying the ID of the modal `div` to be displayed."
    }
  },
  {
    "id": "bootstrap-medium-carousel-005",
    "title": "Image Carousel (Slideshow)",
    "difficulty": "medium",
    "framework": "Bootstrap",
    "frameworkIconText": "BS",
    "tags": [
      "bootstrap",
      "carousel",
      "slideshow",
      "images",
      "javascript component"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "The carousel is a slideshow component for cycling through elements—images or slides of text—like a carousel. It requires Bootstrap's JavaScript plugin and can include controls, indicators, and captions."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div id=\"carouselExampleCaptions\" class=\"carousel slide\" data-bs-ride=\"carousel\">\n  <div class=\"carousel-indicators\">\n    <button type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide-to=\"0\" class=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\n    <button type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>\n  </div>\n  <div class=\"carousel-inner\">\n    <div class=\"carousel-item active\">\n      <img src=\"https://via.placeholder.com/800x400/007bff/ffffff?text=First+Slide\" class=\"d-block w-100\" alt=\"...\">\n      <div class=\"carousel-caption d-none d-md-block\">\n        <h5>First slide label</h5>\n        <p>Some representative placeholder content for the first slide.</p>\n      </div>\n    </div>\n    <div class=\"carousel-item\">\n      <img src=\"https://via.placeholder.com/800x400/6c757d/ffffff?text=Second+Slide\" class=\"d-block w-100\" alt=\"...\">\n      <div class=\"carousel-caption d-none d-md-block\">\n        <h5>Second slide label</h5>\n        <p>Some representative placeholder content for the second slide.</p>\n      </div>\n    </div>\n  </div>\n  <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide=\"prev\">\n    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n    <span class=\"visually-hidden\">Previous</span>\n  </button>\n  <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide=\"next\">\n    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n    <span class=\"visually-hidden\">Next</span>\n  </button>\n</div>\n\n<!-- Requires Bootstrap JS for carousel functionality -->"
      },
      {
        "type": "explanation",
        "text": "The main carousel container has `id` and classes `.carousel .slide`. `.carousel-indicators` create the small navigation dots. `.carousel-inner` holds the `.carousel-item` slides (one must be `.active`). `.carousel-control-prev` and `.carousel-control-next` provide navigation buttons. `data-bs-ride=\"carousel\"` makes it auto-play."
      }
    ],
    "quiz": {
      "snippet": "<div id=\"mySlider\" class=\"carousel slide\">\n  <div class=\"carousel-inner\">\n    <div class=\"carousel-item active\">...</div>\n    <div class=\"carousel-item\">...</div>\n  </div>\n  <!-- Previous/Next controls -->\n</div>",
      "questionText": "In a Bootstrap carousel, what is the role of the `.carousel-item` class?",
      "options": [
        "It defines the navigation indicators (dots).",
        "It defines the 'previous' and 'next' arrow controls.",
        "It defines an individual slide within the carousel.",
        "It sets the overall background color for the carousel."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Each element with the class `.carousel-item` represents a single slide within the carousel's `.carousel-inner` container. Only one `.carousel-item` should have the `.active` class at a time to be visible."
    }
  },
  {
    "id": "bulma-medium-nested-columns-responsive-001",
    "title": "Nested Columns and Responsive Offsets",
    "difficulty": "medium",
    "framework": "Bulma",
    "frameworkIconText": "Bulma",
    "tags": ["bulma", "columns", "grid", "nesting", "offset", "responsive"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bulma's columns can be nested to create complex layouts. You can also apply offsets that are responsive, meaning they only apply at certain breakpoints, allowing for sophisticated alignment adjustments."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div class=\"container\">\n  <div class=\"columns is-desktop\">\n    <div class=\"column is-three-quarters-desktop is-offset-one-quarter-desktop has-background-primary-light p-3\">\n      This column is 3/4 width and offset by 1/4 on desktop and wider.\n    </div>\n  </div>\n  <div class=\"columns mt-4\">\n    <div class=\"column is-half has-background-info-light p-3\">\n      <p class=\"mb-2\">Main content (is-half)</p>\n      <div class=\"columns is-mobile\">\n        <div class=\"column is-one-third has-background-white p-2\">\n          Nested 1/3\n        </div>\n        <div class=\"column has-background-light p-2\">\n          Nested Auto\n        </div>\n      </div>\n    </div>\n    <div class=\"column has-background-success-light p-3\">\n      Sidebar (auto)\n    </div>\n  </div>\n</div>"
      },
      {
        "type": "explanation",
        "text": "`is-offset-one-quarter-desktop` pushes the column to the right by 25% of the width on desktop screens. Nested `columns` and `column` divs allow for finer-grained layout control within a parent column. `is-mobile` on a `columns` div makes columns stack vertically on mobile by default unless specific mobile column sizes are given."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"columns\">\n  <div class=\"column is-4 is-offset-2\">Content</div>\n  <div class=\"column is-3\">Sidebar</div>\n</div>\n<!-- Bulma uses a 12-point system for is-X sizing -->",
      "questionText": "In a standard 12-point Bulma grid context, how many logical columns does the 'Content' div effectively start from, due to the offset?",
      "options": ["Column 1", "Column 2", "Column 3", "Column 4"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "If Bulma's sizing classes like `is-4` are based on a 12-column system (though Bulma is more flexible, this is a common interpretation for fractional classes), `is-offset-2` would mean it's offset by 2/12ths of the width. The content itself would then effectively start at the 3rd logical column position (after a 2-column gap)."
    }
  },
  {
    "id": "bulma-medium-card-component-002",
    "title": "Building Cards",
    "difficulty": "medium",
    "framework": "Bulma",
    "frameworkIconText": "Bulma",
    "tags": ["bulma", "card", "components", "ui", "layout"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "The card component is a versatile container for displaying content in a structured way, often including a header, image, content area, and footer. Bulma provides classes to build these sections."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<div class=\"columns\">\n  <div class=\"column is-one-third\">\n    <div class=\"card\">\n      <div class=\"card-image\">\n        <figure class=\"image is-4by3\">\n          <img src=\"https://bulma.io/images/placeholders/1280x960.png\" alt=\"Placeholder image\">\n        </figure>\n      </div>\n      <div class=\"card-content\">\n        <div class=\"media\">\n          <div class=\"media-left\">\n            <figure class=\"image is-48x48\">\n              <img src=\"https://bulma.io/images/placeholders/96x96.png\" alt=\"Placeholder image\">\n            </figure>\n          </div>\n          <div class=\"media-content\">\n            <p class=\"title is-4\">John Smith</p>\n            <p class=\"subtitle is-6\">@johnsmith</p>\n          </div>\n        </div>\n        <div class=\"content\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n          Phasellus nec iaculis mauris. <a>@bulmaio</a>.\n          <a href=\"#\">#css</a> <a href=\"#\">#responsive</a>\n          <br>\n          <time datetime=\"2016-1-1\">11:09 PM - 1 Jan 2016</time>\n        </div>\n      </div>\n      <footer class=\"card-footer\">\n        <a href=\"#\" class=\"card-footer-item\">Save</a>\n        <a href=\"#\" class=\"card-footer-item\">Edit</a>\n        <a href=\"#\" class=\"card-footer-item\">Delete</a>\n      </footer>\n    </div>\n  </div>\n  <!-- Add more columns with cards here -->\n</div>"
      },
      {
        "type": "explanation",
        "text": "A `card` is built with sections: `card-image` (often containing a `figure` with class `image is-4by3` or similar for aspect ratio), `card-content` (which can include `media` objects and general `content`), and `card-footer` (typically for actions using `card-footer-item`)."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"card\">\n  <header class=\"card-header\">\n    <p class=\"card-header-title\">Component</p>\n  </header>\n  <div class=\"card-content\">...</div>\n</div>",
      "questionText": "Which Bulma class is used to define the main content area of a card, distinct from its header or footer?",
      "options": ["card-body", "card-main", "card-content", "content-area"],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `card-content` class is used to wrap the primary content within a Bulma card component."
    }
  },
  {
    "id": "bulma-medium-menu-navigation-003",
    "title": "Creating a Menu for Navigation",
    "difficulty": "medium",
    "framework": "Bulma",
    "frameworkIconText": "Bulma",
    "tags": ["bulma", "menu", "navigation", "sidebar", "is-active"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bulma's menu component is ideal for creating side navigation bars or structured lists of links. It uses nested lists and specific classes for labels and active states."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<aside class=\"menu p-4\" style=\"width: 250px;\">\n  <p class=\"menu-label\">\n    General\n  </p>\n  <ul class=\"menu-list\">\n    <li><a>Dashboard</a></li>\n    <li><a>Customers</a></li>\n  </ul>\n  <p class=\"menu-label\">\n    Administration\n  </p>\n  <ul class=\"menu-list\">\n    <li><a>Team Settings</a></li>\n    <li>\n      <a class=\"is-active\">Manage Your Team</a> <!-- Active link -->\n      <ul>\n        <li><a>Members</a></li>\n        <li><a>Plugins</a></li>\n        <li><a>Add a member</a></li>\n      </ul>\n    </li>\n    <li><a>Invitations</a></li>\n  </ul>\n  <p class=\"menu-label\">\n    Transactions\n  </p>\n  <ul class=\"menu-list\">\n    <li><a>Payments</a></li>\n  </ul>\n</aside>"
      },
      {
        "type": "explanation",
        "text": "The main container is an `<aside class=\"menu\">`. `menu-label` is used for section titles. `menu-list` contains `<li>` items, which in turn contain `<a>` tags. An active link can be styled with the `is-active` class. Nested `<ul>` elements create submenus."
      }
    ],
    "quiz": {
      "snippet": "<ul class=\"menu-list\">\n  <li><a class=\"is-active\">Profile</a></li>\n  <li><a>Settings</a></li>\n</ul>",
      "questionText": "In a Bulma menu, what is the purpose of the `is-active` class on an `<a>` tag?",
      "options": [
        "It disables the link.",
        "It styles the link to indicate it's the currently active or selected page/section.",
        "It adds a dropdown arrow to the link.",
        "It makes the link open in a new tab."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `is-active` class is used on an anchor tag within a `menu-list` to visually highlight it as the currently active or selected item in the menu."
    }
  },
  {
    "id": "bulma-medium-modal-structure-004",
    "title": "Modal Structure (CSS Only)",
    "difficulty": "medium",
    "framework": "Bulma",
    "frameworkIconText": "Bulma",
    "tags": ["bulma", "modal", "dialog", "popup", "is-active", "css only"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bulma provides CSS for styling modal dialogs. To make a modal visible, you typically add the `is-active` class to the main modal container using JavaScript. The structure includes a background, the modal content box, and often a header, body, and footer."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!-- Button to trigger modal (JavaScript would handle adding 'is-active' to modal) -->\n<!-- <button onclick=\"document.getElementById('myModal').classList.add('is-active')\">Open Modal</button> -->\n\n<div id=\"myModal\" class=\"modal\"> <!-- Add 'is-active' class here to show it -->\n  <div class=\"modal-background\"></div>\n  <div class=\"modal-card\">\n    <header class=\"modal-card-head\">\n      <p class=\"modal-card-title\">Modal Title</p>\n      <button class=\"delete\" aria-label=\"close\" onclick=\"document.getElementById('myModal').classList.remove('is-active')\"></button>\n    </header>\n    <section class=\"modal-card-body\">\n      <!-- Content ... -->\n      <p>This is the modal content. You can put anything here, like a form or detailed information.</p>\n    </section>\n    <footer class=\"modal-card-footer\">\n      <button class=\"button is-success\" onclick=\"alert('Saved!')\">Save changes</button>\n      <button class=\"button\" onclick=\"document.getElementById('myModal').classList.remove('is-active')\">Cancel</button>\n    </footer>\n  </div>\n</div>\n\n<!-- Example JavaScript to toggle (not part of Bulma core):\n<script>\n  function toggleModal(modalID) {\n    const modal = document.getElementById(modalID);\n    modal.classList.toggle('is-active');\n  }\n</script>\n<button onclick=\"toggleModal('myModal')\">Open Modal</button>\n-->"
      },
      {
        "type": "explanation",
        "text": "The main container is `.modal`. `.modal-background` creates the overlay. `.modal-card` is the actual dialog box, which is often structured with `.modal-card-head`, `.modal-card-body`, and `.modal-card-footer`. The `is-active` class on the `.modal` div makes it visible. The close button (`.delete`) and other actions require JavaScript to toggle this class."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"modal\" id=\"confirmModal\">\n  <div class=\"modal-background\"></div>\n  <div class=\"modal-content\">\n    <p class=\"has-text-centered p-5\">Are you sure?</p>\n  </div>\n  <button class=\"modal-close is-large\" aria-label=\"close\"></button>\n</div>\n<!-- JavaScript later adds 'is-active' to #confirmModal -->",
      "questionText": "Which class needs to be added to the main `div.modal` element to make a Bulma modal visible?",
      "options": ["is-open", "is-visible", "show-modal", "is-active"],
      "correctOptionIndex": 3,
      "explanationAfterAnswer": "To display a Bulma modal, you add the `is-active` class to the element with the `modal` class. This is typically done using JavaScript in response to a user action."
    }
  },
  {
    "id": "bulma-medium-form-controls-layout-005",
    "title": "Form Controls and Layout",
    "difficulty": "medium",
    "framework": "Bulma",
    "frameworkIconText": "Bulma",
    "tags": [
      "bulma",
      "forms",
      "input",
      "select",
      "textarea",
      "field",
      "control",
      "label"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Bulma styles common form controls and provides helper classes for layout. The `field` class is a container for a form control and its label. The `control` class is a wrapper around the input itself, often used for icons or addons."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<form>\n  <div class=\"field\">\n    <label class=\"label\">Name</label>\n    <div class=\"control\">\n      <input class=\"input is-success\" type=\"text\" placeholder=\"e.g. John Doe\">\n    </div>\n    <p class=\"help is-success\">This username is available</p>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">Email</label>\n    <div class=\"control has-icons-left has-icons-right\">\n      <input class=\"input is-danger\" type=\"email\" placeholder=\"Email input\" value=\"hello@\">\n      <span class=\"icon is-small is-left\">\n        <i class=\"fas fa-envelope\"></i> <!-- Font Awesome icon -->\n      </span>\n      <span class=\"icon is-small is-right\">\n        <i class=\"fas fa-exclamation-triangle\"></i> <!-- Font Awesome icon -->\n      </span>\n    </div>\n    <p class=\"help is-danger\">This email is invalid</p>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">Subject</label>\n    <div class=\"control\">\n      <div class=\"select is-fullwidth\">\n        <select>\n          <option>Select dropdown</option>\n          <option>With options</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"field\">\n    <label class=\"label\">Message</label>\n    <div class=\"control\">\n      <textarea class=\"textarea\" placeholder=\"Textarea\"></textarea>\n    </div>\n  </div>\n\n  <div class=\"field is-grouped\">\n    <div class=\"control\">\n      <button class=\"button is-link\">Submit</button>\n    </div>\n    <div class=\"control\">\n      <button class=\"button is-link is-light\">Cancel</button>\n    </div>\n  </div>\n</form>\n<!-- Requires Font Awesome for icons: <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\"> -->"
      },
      {
        "type": "explanation",
        "text": "`.field` groups a label and control. `.control` wraps the input. Input elements get the `.input` class, textareas `.textarea`, and selects are wrapped in `.select`. Contextual color classes like `is-success` or `is-danger` can be applied to inputs. `has-icons-left` and `has-icons-right` on `.control` allow for icons inside inputs. `is-grouped` on `.field` is for grouping controls (like buttons)."
      }
    ],
    "quiz": {
      "snippet": "<div class=\"field\">\n  <label class=\"label\">Password</label>\n  <div class=\"control\">\n    <input class=\"input\" type=\"password\" placeholder=\"Password\">\n  </div>\n</div>",
      "questionText": "In Bulma form structure, what is the typical role of the `div` with the class `control`?",
      "options": [
        "It acts as the main form container.",
        "It is used for displaying validation error messages.",
        "It is a wrapper around the actual form input element (like `<input>`, `<select>`, `<textarea>`).",
        "It defines the label for the form input."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `.control` class in Bulma is typically used as a direct wrapper around form input elements. It helps in styling and can be used with modifiers like `has-icons-left` or `has-icons-right` if you want to include icons within the input field area."
    }
  },
  {
    "id": "threejs-medium-textures-materials-001",
    "title": "Applying Textures to Materials",
    "difficulty": "medium",
    "framework": "Three.js",
    "frameworkIconText": "3D",
    "tags": [
      "threejs",
      "textures",
      "materials",
      "TextureLoader",
      "MeshStandardMaterial",
      "uv mapping"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Textures add realism to 3D objects by wrapping an image around their surfaces. In Three.js, you load an image using `TextureLoader` and apply it to a material's `map` property. The material (e.g., `MeshStandardMaterial`) then uses this texture when rendering."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume scene, camera, renderer are set up\n// Ensure you have an image file, e.g., 'textures/crate.gif' or 'textures/earth.jpg'\n\nconst textureLoader = new THREE.TextureLoader();\nconst crateTexture = textureLoader.load('textures/crate.gif'); // Path to your texture image\n// For more control, you can use the onLoad callback:\n// textureLoader.load('path/to/image.jpg', function(texture) { /* use texture */ });\n\nconst geometry = new THREE.BoxGeometry(2, 2, 2);\n// MeshStandardMaterial reacts well to light and can use various maps (color, normal, roughness etc.)\nconst material = new THREE.MeshStandardMaterial({\n  map: crateTexture // Apply the loaded texture as the color map\n  // roughness: 0.5, // Example of other material properties\n  // metalness: 0.5\n});\n\nconst texturedCube = new THREE.Mesh(geometry, material);\nscene.add(texturedCube);\n\n// Add some lights to see MeshStandardMaterial properly\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\nscene.add(ambientLight);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\ndirectionalLight.position.set(5, 10, 7.5);\nscene.add(directionalLight);\n\ncamera.position.z = 5;\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  texturedCube.rotation.x += 0.005;\n  texturedCube.rotation.y += 0.005;\n  renderer.render(scene, camera);\n}\nif (typeof renderer !== 'undefined') animate();"
      },
      {
        "type": "explanation",
        "text": "`TextureLoader().load()` asynchronously loads an image. The returned `Texture` object is then assigned to the `map` property of a material like `MeshStandardMaterial`. The texture is mapped onto the geometry's UV coordinates."
      }
    ],
    "quiz": {
      "snippet": "const loader = new THREE.TextureLoader();\nconst diffuseMap = loader.load('color.png');\nconst material = new THREE.MeshPhongMaterial({ map: diffuseMap });",
      "questionText": "In Three.js, what does the `map` property of a material (like `MeshPhongMaterial` or `MeshStandardMaterial`) typically represent when assigned a texture?",
      "options": [
        "A normal map for surface detail",
        "The base color texture (albedo or diffuse map) of the material",
        "An environment map for reflections",
        "A displacement map for geometry deformation"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `map` property of most standard Three.js materials is used to apply a color texture, also known as a diffuse map or albedo map. This texture determines the base color of the material's surface."
    }
  },
  {
    "id": "threejs-medium-orbitcontrols-002",
    "title": "Camera Interaction with `OrbitControls`",
    "difficulty": "medium",
    "framework": "Three.js",
    "frameworkIconText": "3D",
    "tags": [
      "threejs",
      "camera controls",
      "OrbitControls",
      "interaction",
      "user input"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "`OrbitControls` is a popular controller that allows users to interactively orbit the camera around a target point, zoom, and pan. It's not part of the core Three.js library but is available in its examples directory and often used."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume scene, camera, renderer, and a cube mesh are set up\n// scene.add(cube);\n// camera.position.set(0, 2, 5);\n\n// Import OrbitControls (path might vary based on your setup)\n// For module-based projects: import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// For CDN/script tag: THREE.OrbitControls will be available if you include the file\n\n// This example assumes OrbitControls is available via THREE.OrbitControls\n// If using modules: const controls = new OrbitControls(camera, renderer.domElement);\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\n\n// Optional configurations:\n// controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n// controls.dampingFactor = 0.05;\n// controls.screenSpacePanning = false;\n// controls.minDistance = 2;\n// controls.maxDistance = 10;\n// controls.maxPolarAngle = Math.PI / 2; // Prevent looking from below ground\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  \n  // controls.update(); // only required if controls.enableDamping or controls.autoRotate are set to true\n  \n  renderer.render(scene, camera);\n}\n\nif (typeof renderer !== 'undefined' && typeof THREE.OrbitControls !== 'undefined') {\n  animate();\n} else {\n  console.error('Renderer or OrbitControls not initialized.');\n}"
      },
      {
        "type": "explanation",
        "text": "You instantiate `OrbitControls` by passing the `camera` and the `renderer.domElement` (the canvas). This automatically adds mouse and touch event listeners for orbiting, zooming (scroll), and panning (right-click/two-finger drag by default). If `enableDamping` is true, you must call `controls.update()` in your animation loop."
      }
    ],
    "quiz": {
      "snippet": "// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// const controls = new OrbitControls(myCamera, myRenderer.domElement);\n// controls.enableZoom = false;",
      "questionText": "What is the primary function of `OrbitControls` in a Three.js scene?",
      "options": [
        "To control the animation playback speed of objects.",
        "To automatically orbit lights around the scene.",
        "To allow the user to interactively control the camera's viewpoint by orbiting, zooming, and panning.",
        "To optimize the rendering performance of complex geometries."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`OrbitControls` provides a user-friendly way to navigate a 3D scene by allowing mouse/touch controls to orbit the camera around a focal point, zoom in/out, and pan the view."
    }
  },
  {
    "id": "threejs-medium-gltf-loader-003",
    "title": "Loading 3D Models (GLTF/GLB)",
    "difficulty": "medium",
    "framework": "Three.js",
    "frameworkIconText": "3D",
    "tags": [
      "threejs",
      "3d models",
      "gltf",
      "glb",
      "GLTFLoader",
      "asset loading"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Three.js can load various 3D model formats. GLTF (GL Transmission Format) and its binary version GLB are popular, efficient formats for web-based 3D. You use `GLTFLoader` to load these models."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume scene, camera, renderer, and lights are set up\n// camera.position.set(0, 1, 5);\n\n// Import GLTFLoader (path might vary based on your setup)\n// For module-based projects: import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n// For CDN/script tag: THREE.GLTFLoader will be available\n\n// This example assumes GLTFLoader is available via THREE.GLTFLoader\nconst loader = new THREE.GLTFLoader();\n\nloader.load(\n  'models/my_model.glb', // Path to your .gltf or .glb file\n  function (gltf) {\n    // Called when the resource is loaded\n    const model = gltf.scene; // The root THREE.Group of the loaded model\n    model.scale.set(0.5, 0.5, 0.5); // Example: scale down the model\n    model.position.y = -1;        // Example: adjust position\n    scene.add(model);\n    console.log('Model loaded successfully!');\n  },\n  function (xhr) {\n    // Called while loading is progressing\n    console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n  },\n  function (error) {\n    // Called when loading has errors\n    console.error('An error happened while loading the model:', error);\n  }\n);\n\n// Animation loop\n// function animate() {\n//   requestAnimationFrame(animate);\n//   // if (model) model.rotation.y += 0.005; // Animate model if it's loaded\n//   renderer.render(scene, camera);\n// }\n// if (typeof renderer !== 'undefined' && typeof THREE.GLTFLoader !== 'undefined') animate();"
      },
      {
        "type": "explanation",
        "text": "`GLTFLoader().load()` takes the model path and callback functions for success, progress, and error. On success, the `gltf.scene` object (which is a `THREE.Group` containing the model's meshes) is added to your main scene. GLTF files can include geometry, materials, textures, animations, and more."
      }
    ],
    "quiz": {
      "snippet": "const gltfLoader = new THREE.GLTFLoader();\ngltfLoader.load('path/to/model.glb', (loadedGltf) => {\n  const myModel = loadedGltf.scene;\n  // What should be done with 'myModel' to make it visible?\n});",
      "questionText": "After successfully loading a GLTF model using `GLTFLoader`, what is typically the next step to make the loaded model visible in the scene?",
      "options": [
        "Call `myModel.render()`",
        "Add `myModel` to the `THREE.WebGLRenderer` directly",
        "Add `myModel` (which is `gltf.scene`) to your main `THREE.Scene` object using `scene.add(myModel)`",
        "Convert `myModel` to a `THREE.Texture`"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "The `gltf.scene` object returned by a successful `GLTFLoader.load()` call is a `THREE.Group` containing the model's hierarchy. To make it visible, you need to add this group to your main `THREE.Scene` instance using `scene.add(gltf.scene)`."
    }
  },
  {
    "id": "threejs-medium-lights-shadows-004",
    "title": "Lights and Shadows",
    "difficulty": "medium",
    "framework": "Three.js",
    "frameworkIconText": "3D",
    "tags": [
      "threejs",
      "lighting",
      "shadows",
      "DirectionalLight",
      "SpotLight",
      "castShadow",
      "receiveShadow"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Casting and receiving shadows adds a significant layer of realism to 3D scenes. In Three.js, you need to configure lights to cast shadows, meshes to cast and receive shadows, and the renderer to enable shadow mapping."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume scene, camera, renderer are set up\n// renderer.shadowMap.enabled = true; // Crucial: Enable shadow mapping on the renderer\n// renderer.shadowMap.type = THREE.PCFSoftShadowMap; // Optional: Softer shadows\n\n// Ground plane to receive shadows\nconst planeGeometry = new THREE.PlaneGeometry(20, 20);\nconst planeMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });\nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nplane.rotation.x = -Math.PI / 2; // Rotate to be horizontal\nplane.position.y = -1;\nplane.receiveShadow = true; // Plane will receive shadows\nscene.add(plane);\n\n// Object to cast shadow\nconst sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\nconst sphereMaterial = new THREE.MeshStandardMaterial({ color: 0xff8800 });\nconst sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\nsphere.position.y = 0.5;\nsphere.castShadow = true; // Sphere will cast shadows\nscene.add(sphere);\n\n// Light that casts shadow (DirectionalLight or SpotLight)\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);\ndirectionalLight.position.set(5, 10, 7.5);\ndirectionalLight.castShadow = true; // Enable shadow casting for this light\n// Configure shadow properties (optional, but important for quality/performance)\ndirectionalLight.shadow.mapSize.width = 1024;\ndirectionalLight.shadow.mapSize.height = 1024;\ndirectionalLight.shadow.camera.near = 0.5;\ndirectionalLight.shadow.camera.far = 50;\nscene.add(directionalLight);\n\n// Ambient light (doesn't cast shadows but helps illuminate scene)\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.4);\nscene.add(ambientLight);\n\ncamera.position.set(3, 3, 7);\ncamera.lookAt(0, 0, 0);\n\n// function animate() { /* ... render loop ... */ }"
      },
      {
        "type": "explanation",
        "text": "To enable shadows: 1. `renderer.shadowMap.enabled = true;`. 2. For a light to cast shadows, set `light.castShadow = true;` (e.g., `DirectionalLight`, `SpotLight`). 3. For a mesh to cast shadows, set `mesh.castShadow = true;`. 4. For a mesh to receive shadows, set `mesh.receiveShadow = true;`. Adjusting shadow map size and camera frustum for the light can improve shadow quality."
      }
    ],
    "quiz": {
      "snippet": "const light = new THREE.SpotLight(0xffffff);\nlight.castShadow = true;\nconst object = new THREE.Mesh(geo, mat);\nobject.castShadow = true;\nconst ground = new THREE.Mesh(planeGeo, planeMat);\nground.receiveShadow = true;\n// What else is essential to enable in the renderer for shadows to appear?",
      "questionText": "Besides setting `castShadow` on lights and meshes, and `receiveShadow` on meshes, what must be enabled on the `THREE.WebGLRenderer` instance for shadows to work?",
      "options": [
        "`renderer.shadows = true;`",
        "`renderer.shadowMap.enabled = true;`",
        "`renderer.enableShadows();`",
        "`renderer.compileShadows = true;`"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "For shadows to be rendered in Three.js, you must explicitly enable shadow mapping on the renderer instance by setting `renderer.shadowMap.enabled = true;`. Without this, no shadow calculations will be performed."
    }
  },
  {
    "id": "threejs-medium-custom-geometry-buffer-005",
    "title": "Creating Custom Geometry (Basic BufferGeometry)",
    "difficulty": "medium",
    "framework": "Three.js",
    "frameworkIconText": "3D",
    "tags": [
      "threejs",
      "custom geometry",
      "BufferGeometry",
      "vertices",
      "faces",
      "attributes"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "While Three.js provides many built-in geometries, sometimes you need to create custom shapes. `BufferGeometry` is the most efficient way to do this, by defining vertices, faces (indices), normals, UVs, etc., directly as typed arrays."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume scene, camera, renderer are set up\n\n// Create a custom triangle geometry\nconst geometry = new THREE.BufferGeometry();\n\n// Define vertices (x, y, z for each vertex)\nconst vertices = new Float32Array([\n   -1.0, -1.0,  0.0, // Vertex 0\n    1.0, -1.0,  0.0, // Vertex 1\n    1.0,  1.0,  0.0, // Vertex 2\n   // For a second triangle to make a square (optional):\n   // -1.0, -1.0,  0.0, // Vertex 0 (reuse)\n   //  1.0,  1.0,  0.0, // Vertex 2 (reuse)\n   // -1.0,  1.0,  0.0  // Vertex 3\n]);\n\n// itemSize = 3 because each vertex is (x, y, z)\ngeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\n// Optional: Define indices if you reuse vertices (for a square made of 2 triangles)\n// const indices = [0, 1, 2,  0, 2, 3]; // Defines two triangles\n// geometry.setIndex(indices);\n\n// Optional: Compute normals for lighting (if not using MeshBasicMaterial)\n// geometry.computeVertexNormals();\n\nconst material = new THREE.MeshBasicMaterial({ color: 0xff00ff, side: THREE.DoubleSide });\nconst customMesh = new THREE.Mesh(geometry, material);\nscene.add(customMesh);\n\ncamera.position.z = 3;\n\n// function animate() { /* ... render loop ... */ }"
      },
      {
        "type": "explanation",
        "text": "`BufferGeometry` stores its data (like vertex positions, normals, colors, UVs) in `BufferAttribute` objects, which are wrappers around JavaScript typed arrays (e.g., `Float32Array`). For a triangle, you define 3 vertices. For more complex shapes, an `index` attribute can define how vertices connect to form faces, allowing vertex reuse."
      }
    ],
    "quiz": {
      "snippet": "const geometry = new THREE.BufferGeometry();\nconst positions = new Float32Array([0,0,0, 1,0,0, 0,1,0]);\n// How to add these positions to the geometry?",
      "questionText": "To define the vertex positions for a `THREE.BufferGeometry`, which method is typically used?",
      "options": [
        "`geometry.addVertices(positions)`",
        "`geometry.setVertices(positions, 3)`",
        "`geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))`",
        "`geometry.positions = positions;`"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "Vertex positions are added to a `BufferGeometry` as a named attribute, typically 'position'. This is done using `geometry.setAttribute('position', new THREE.BufferAttribute(typedArray, itemSize))`, where `itemSize` is 3 for (x,y,z) coordinates."
    }
  },
  {
    "id": "pixijs-medium-ticker-animation-001",
    "title": "Animation Loop with `app.ticker`",
    "difficulty": "medium",
    "framework": "PixiJS",
    "frameworkIconText": "Pixi",
    "tags": ["pixijs", "animation", "ticker", "game loop", "delta time"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "For continuous animation or game logic, PixiJS provides a `ticker`. The `app.ticker` is an instance of `PIXI.Ticker` that fires an event (usually 60 times per second) allowing you to update your scene. The callback receives a `delta` value representing time elapsed or frame progression."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume 'app' and 'bunny' sprite are set up and bunny is on stage\n// bunny.x = 100; bunny.y = 100;\n\nlet speed = 5;\nlet directionX = 1;\nlet directionY = 1;\n\n// Add a function to the ticker\napp.ticker.add((delta) => {\n  // 'delta' is a factor to make animation frame-rate independent.\n  // For PIXI.Ticker, delta is by default 1 for 60FPS, 2 for 30FPS etc.\n  // It represents elapsed frames. For time-based delta, use app.ticker.deltaTime.\n\n  bunny.x += speed * directionX * delta;\n  bunny.y += speed * directionY * delta;\n\n  // Basic bounds check and bounce\n  if (bunny.x > app.screen.width - bunny.width / 2 || bunny.x < bunny.width / 2) {\n    directionX *= -1; // Reverse direction\n  }\n  if (bunny.y > app.screen.height - bunny.height / 2 || bunny.y < bunny.height / 2) {\n    directionY *= -1; // Reverse direction\n  }\n\n  bunny.rotation += 0.01 * delta;\n});\n\n// To remove a function from the ticker:\n// const myUpdate = (delta) => { /* ... */ };\n// app.ticker.add(myUpdate);\n// app.ticker.remove(myUpdate);"
      },
      {
        "type": "explanation",
        "text": "The function added to `app.ticker.add()` is called on every frame. `delta` (or `app.ticker.deltaMS` / `app.ticker.deltaTime` for time-based values) helps make animations smooth regardless of frame rate fluctuations. In this example, the bunny moves, bounces off screen edges, and rotates."
      }
    ],
    "quiz": {
      "snippet": "let rotationSpeed = 0.05;\napp.ticker.add((delta) => {\n  mySprite.rotation += rotationSpeed * delta;\n});",
      "questionText": "What is the purpose of the `delta` parameter passed to the function in `app.ticker.add((delta) => { ... })`?",
      "options": [
        "The current mouse x-coordinate.",
        "A factor representing the time elapsed or frames passed since the last tick, used to make animations frame-rate independent.",
        "The total number of objects on the stage.",
        "A random number for animation variability."
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "The `delta` parameter in the ticker callback (by default in PixiJS v7 representing elapsed frames, where 1 means a full 1/60th of a second assuming 60FPS target) is used to scale animations so they run at a consistent speed across different frame rates. For time in milliseconds, one might use `app.ticker.deltaMS`."
    }
  },
  {
    "id": "pixijs-medium-spritesheets-animation-002",
    "title": "Sprite Sheet Animations with `AnimatedSprite`",
    "difficulty": "medium",
    "framework": "PixiJS",
    "frameworkIconText": "Pixi",
    "tags": [
      "pixijs",
      "spritesheet",
      "animation",
      "AnimatedSprite",
      "TextureAtlas"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Sprite sheets (or texture atlases) are images containing multiple smaller images (frames) for an animation. PixiJS's `PIXI.AnimatedSprite` makes it easy to create animations from an array of textures extracted from a sprite sheet."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume 'app' is created.\n// You need a sprite sheet JSON (e.g., from TexturePacker) and the corresponding image.\n// Example: 'assets/spritesheet.json' and 'assets/spritesheet.png'\n\nasync function setupAnimation() {\n  // Load the spritesheet data and texture\n  const sheet = await PIXI.Assets.load('assets/spritesheet.json'); \n  // 'sheet.textures' now contains all individual frame textures\n  // 'sheet.animations' might contain pre-defined animation sequences if in JSON\n\n  // Example: Assuming your JSON defines an animation called 'walk_cycle'\n  // Or manually create an array of textures for an animation\n  const explosionFrames = [];\n  for (let i = 0; i < 26; i++) { // Assuming 26 frames named like 'explosion_01.png', 'explosion_02.png'\n     const frameKey = `Explosion_Sequence_A ${String(i + 1).padStart(5, '0')}.png`; // Adjust to your frame naming\n     if (sheet.textures[frameKey]) {\n        explosionFrames.push(sheet.textures[frameKey]);\n     }\n  }\n\n  if (explosionFrames.length > 0) {\n    const animatedExplosion = new PIXI.AnimatedSprite(explosionFrames);\n    animatedExplosion.x = app.screen.width / 2;\n    animatedExplosion.y = app.screen.height / 2;\n    animatedExplosion.anchor.set(0.5);\n    animatedExplosion.animationSpeed = 0.5; // Adjust speed (frames per ticker update)\n    animatedExplosion.loop = false; // Set to true for looping animations\n    animatedExplosion.play();\n    app.stage.addChild(animatedExplosion);\n  } else {\n    console.error('Could not find frames for explosion animation.');\n  }\n}\n\nif (typeof PIXI !== 'undefined') setupAnimation();"
      },
      {
        "type": "explanation",
        "text": "`PIXI.Assets.load()` can load sprite sheet JSON data. The individual frame textures are typically in `sheet.textures`. You create an array of these textures in the desired animation sequence and pass it to `PIXI.AnimatedSprite`. Properties like `animationSpeed` and `loop`, and methods like `play()`, `stop()`, `gotoAndPlay()` control the animation."
      }
    ],
    "quiz": {
      "snippet": "const frames = [texture1, texture2, texture3];\nconst anim = new PIXI.AnimatedSprite(frames);\nanim.animationSpeed = 0.2;\nanim.loop = true;\nanim.play();",
      "questionText": "What does the `animationSpeed` property of a `PIXI.AnimatedSprite` control?",
      "options": [
        "The total duration of one animation loop in seconds.",
        "The number of frames displayed per second (FPS).",
        "A multiplier for how many frames are advanced per ticker update (e.g., 1 means 1 frame per tick, 0.5 means 1 frame every 2 ticks).",
        "The physical speed the sprite moves across the screen."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`animationSpeed` is a factor that determines how fast the animation plays. A value of 1 means one frame of animation per ticker update (tick). Values less than 1 slow it down, and greater than 1 speed it up. It's not directly FPS but related to the ticker's speed."
    }
  },
  {
    "id": "pixijs-medium-filters-blur-003",
    "title": "Applying Basic Filters (e.g., Blur)",
    "difficulty": "medium",
    "framework": "PixiJS",
    "frameworkIconText": "Pixi",
    "tags": [
      "pixijs",
      "filters",
      "effects",
      "BlurFilter",
      "graphics post-processing"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "PixiJS allows you to apply WebGL filters to display objects (or containers) for various visual effects. Filters are applied to the object's texture before it's rendered. Common filters include blur, color matrix, displacement, etc."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume 'app' and 'bunny' sprite are set up and bunny is on stage\n// import { BlurFilter } from 'pixi.js'; // Or from PIXI.filters if using UMD/global\n\n// const bunny = new PIXI.Sprite(PIXI.Texture.from('assets/bunny.png'));\n// app.stage.addChild(bunny);\n// bunny.x = 100; bunny.y = 100;\n\n// 1. Create a filter instance\n// Note: In PixiJS v7+, filters are often directly in PIXI.filters or PIXI itself\n// For older versions or specific filter packages, you might import from 'pixi-filters'\n// Ensure you have the correct import for your PixiJS version.\n// Let's assume BlurFilter is available for this example:\nconst blurFilter = new PIXI.BlurFilter();\nblurFilter.blur = 4; // Set blur amount (higher is more blurry)\nblurFilter.quality = 2; // Optional: number of passes, affects performance\n\n// 2. Apply the filter(s) to a display object\n// Filters are applied as an array\n// bunny.filters = [blurFilter];\n\n// You can also apply filters to containers\nconst container = new PIXI.Container();\n// container.addChild(bunny);\n// const anotherSprite = new PIXI.Sprite(PIXI.Texture.from('assets/another.png'));\n// container.addChild(anotherSprite);\n// container.filters = [blurFilter]; // Applies blur to the entire container\n// app.stage.addChild(container);\n\n// Example: Animate blur (in app.ticker)\n// let blurAmount = 0;\n// let blurDirection = 0.1;\n// app.ticker.add(() => {\n//   blurAmount += blurDirection;\n//   if (blurAmount > 8 || blurAmount < 0) blurDirection *= -1;\n//   blurFilter.blur = blurAmount;\n// });"
      },
      {
        "type": "explanation",
        "text": "You create an instance of a filter class (e.g., `PIXI.BlurFilter`). Then, you assign an array containing this filter instance to the `filters` property of a display object or container. The filter will be applied when that object is rendered. Filter properties (like `blurFilter.blur`) can often be animated."
      }
    ],
    "quiz": {
      "snippet": "const mySprite = new PIXI.Sprite(texture);\nconst pixelateFilter = new PIXI.filters.PixelateFilter(10); // Example\nmySprite.filters = [pixelateFilter];",
      "questionText": "How are filters typically applied to a display object in PixiJS?",
      "options": [
        "By calling `mySprite.applyFilter(pixelateFilter)`",
        "By setting `mySprite.style.filter = 'pixelate(10px)'`",
        "By assigning an array of filter instances to the `mySprite.filters` property",
        "By adding the filter as a child: `mySprite.addChild(pixelateFilter)`"
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "To apply one or more filters to a PixiJS display object, you assign an array of filter instances to its `filters` property (e.g., `displayObject.filters = [myFilter1, myFilter2];`)."
    }
  },
  {
    "id": "pixijs-medium-masks-004",
    "title": "Masking Display Objects",
    "difficulty": "medium",
    "framework": "PixiJS",
    "frameworkIconText": "Pixi",
    "tags": ["pixijs", "masking", "clipping", "Graphics", "Sprite"],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "Masking allows you to control the visible area of a display object. You can use another display object (like a `PIXI.Graphics` shape or a `PIXI.Sprite` with an alpha channel) as a mask. Only the parts of the masked object that overlap with the opaque areas of the mask will be visible."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume 'app' is created\n\n// Object to be masked\n// const imageTexture = await PIXI.Assets.load('assets/photo.jpg');\n// const photo = new PIXI.Sprite(imageTexture);\n// photo.width = 300; photo.height = 200;\n// app.stage.addChild(photo);\n\n// Create a mask (e.g., a circle)\nconst circularMask = new PIXI.Graphics();\ncircularMask.beginFill(0xFFFFFF); // Color doesn't matter for mask shape, only alpha\ncircularMask.drawCircle(150, 100, 80); // cx, cy, radius\ncircularMask.endFill();\n// The mask itself doesn't need to be added to the stage if only used as a mask\n// app.stage.addChild(circularMask); // Not necessary if only for masking\n\n// Apply the mask\n// photo.mask = circularMask;\n\n// Note: If the mask and the masked object are not positioned correctly relative to each other,\n// the masking effect might not be what you expect. Often, the mask is added as a child\n// of the object to be masked or they share a common parent and are positioned appropriately.\n\n// Alternative: Masking a container\nconst container = new PIXI.Container();\n// container.addChild(photo);\n// container.mask = circularMask;\n// app.stage.addChild(container);\n\n// To unmask:\n// photo.mask = null;"
      },
      {
        "type": "explanation",
        "text": "You create a `PIXI.Graphics` object or a `PIXI.Sprite` to serve as the mask. Then, you assign this mask object to the `mask` property of the display object you want to mask. The masked object will only be visible where the mask is opaque (or has alpha > 0)."
      }
    ],
    "quiz": {
      "snippet": "const myObject = new PIXI.Sprite(texture);\nconst myMask = new PIXI.Graphics().drawRect(0,0,50,50).endFill();\nmyObject.mask = myMask;",
      "questionText": "If `myMask` (a 50x50 rectangle at 0,0) is applied as a mask to `myObject`, what part of `myObject` will be visible?",
      "options": [
        "The entire `myObject`",
        "Only the portion of `myObject` that overlaps with the opaque area defined by `myMask`",
        "The area of `myObject` *outside* the `myMask`",
        "Nothing, the mask hides everything by default"
      ],
      "correctOptionIndex": 1,
      "explanationAfterAnswer": "When a mask is applied, only the parts of the masked display object that lie within the opaque (or non-transparent) areas of the mask object will be rendered. The rest is clipped."
    }
  },
  {
    "id": "pixijs-medium-render-textures-005",
    "title": "Render Textures for Caching or Effects",
    "difficulty": "medium",
    "framework": "PixiJS",
    "frameworkIconText": "Pixi",
    "tags": [
      "pixijs",
      "render texture",
      "caching",
      "performance",
      "PIXI.RenderTexture"
    ],
    "type": "lesson_and_quiz",
    "lessonContent": [
      {
        "type": "paragraph",
        "text": "`PIXI.RenderTexture` allows you to render a display object (or a whole container) to an off-screen texture. This can be useful for caching complex graphics that don't change often (improving performance) or for creating special effects by using the generated texture elsewhere."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Assume 'app' (PIXI.Application) is created\n\n// Create a container with some complex graphics\nconst complexGraphicsContainer = new PIXI.Container();\nfor (let i = 0; i < 10; i++) {\n  const rect = new PIXI.Graphics()\n    .beginFill(Math.random() * 0xFFFFFF)\n    .drawRect(Math.random() * 180, Math.random() * 180, 20, 20)\n    .endFill();\n  complexGraphicsContainer.addChild(rect);\n}\n\n// Create a RenderTexture. The size should match the content you want to capture.\nconst renderTexture = PIXI.RenderTexture.create({ width: 200, height: 200 });\n\n// Render the container to the render texture\n// The second argument (true) clears the render texture before drawing\napp.renderer.render(complexGraphicsContainer, { renderTexture: renderTexture, clear: true });\n\n// Now you can use the renderTexture like any other texture\nconst spriteFromTexture = new PIXI.Sprite(renderTexture);\nspriteFromTexture.x = 50;\nspriteFromTexture.y = 50;\napp.stage.addChild(spriteFromTexture);\n\n// If complexGraphicsContainer changes, you'd need to re-render it to the renderTexture\n// to update the spriteFromTexture's appearance."
      },
      {
        "type": "explanation",
        "text": "`PIXI.RenderTexture.create()` creates a new render texture of a specified size. You then use `app.renderer.render(displayObject, { renderTexture })` to draw the `displayObject` onto this texture. The resulting texture can be used to create a `PIXI.Sprite`, effectively creating a cached image of the original object(s)."
      }
    ],
    "quiz": {
      "snippet": "const rt = PIXI.RenderTexture.create({ width: 100, height: 100 });\nconst myContainer = new PIXI.Container(); /* ... add stuff to container ... */ \nrenderer.render(myContainer, { renderTexture: rt });\nconst sprite = new PIXI.Sprite(rt);",
      "questionText": "What is a common reason for using `PIXI.RenderTexture`?",
      "options": [
        "To load external image files.",
        "To define the main stage of the application.",
        "To cache complex or frequently re-rendered graphics into a single texture for performance benefits or to create texture-based effects.",
        "To draw primitive vector shapes like rectangles and circles."
      ],
      "correctOptionIndex": 2,
      "explanationAfterAnswer": "`PIXI.RenderTexture` is used to render a portion of the display tree to a texture. This is often done to cache complex graphics that don't change frequently, which can significantly improve rendering performance by reducing the number of draw calls or complex computations per frame. It's also used for creating various visual effects."
    }
  }
]
